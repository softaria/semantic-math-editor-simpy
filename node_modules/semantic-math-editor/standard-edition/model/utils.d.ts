/**
 * @hidden
 * @packageDocumentation
 */
import { AnyNode, RootNode, Terminal } from "./model-base";
import { FuncNode, TrigName, VariableNode } from "./model-math";
import { VisualGraph } from "../structure/visual-levels";
/**
 *
 * @param node Возвращает все Terminal всего поддерева.
 */
export declare function getAllTerminals(node: AnyNode, withChildren?: boolean): Terminal[];
export declare function getRoot(n: AnyNode): RootNode;
export interface Point {
    readonly x: number;
    readonly y: number;
}
export declare function endsWith(str: string, suffix: string): boolean;
/**
 * Check if <i>node</i> is in subtree of <i>root</i>
 * @param root {AnyNode}
 * @param node {AnyNode}
 */
export declare function isInSubtree(root: AnyNode, node: AnyNode): any;
export declare type Class = {
    new (...args: any[]): any;
};
export declare function partOf(node: AnyNode, t: Class): AnyNode;
export declare function getCommonParent(...nodes: AnyNode[]): AnyNode;
export declare function getTrigSpeakName(func: TrigName): string;
export declare namespace FunctionHelper {
    export function isValidOperatorOperand(operator: AnyNode, operand: AnyNode | null, isFunctionVariable: (VariableNode: any) => boolean): boolean;
    export function findOperand(vg: VisualGraph, node: AnyNode): AnyNode | null;
    export function isInFunctionOperator(node: AnyNode): FuncNode | null;
    export function isNodeIsVariableFunctionName(node: AnyNode, visualGraph: VisualGraph, isFunctionVariable: (VariableNode: any) => boolean): VariableNode | null;
    export function getFunctionOperatorVariable(node: AnyNode): VariableNode | null;
    export function isFunctionOperatorReversible(node: AnyNode): boolean;
    export function getActualOperator(operator: AnyNode): AnyNode;
    export function getOperatorSurroundChild(node: AnyNode): AnyNode | undefined;
    interface FunctionDefinition {
        isValidOperator: (node: AnyNode, isFunctionVariable: (VariableNode: any) => boolean) => boolean;
        isValidOperand: (node: AnyNode) => boolean;
        isSurroundAllowed: boolean;
    }
    export function isDifferentialFunction(node: FuncNode): boolean;
    export function isLeibnizDifferentialFunction(node: FuncNode): boolean;
    export function getFunctionDefinition(operator: AnyNode, isFunctionVariable: (VariableNode: any) => boolean): FunctionDefinition;
    export {};
}
export declare function guid(): string;
