/**
 * @hidden
 * @packageDocumentation
 */
import { AnyNode, INonTerminal } from "./model-base";
import { VisualGraph } from "../structure/visual-levels";
export interface HasLeftChild extends INonTerminal {
    getLeftChild(): AnyNode;
    getLeftPriority(rotateTarget?: AnyNode): number;
}
export interface HasRightChild extends INonTerminal {
    getRightChild(): AnyNode;
    getRightPriority(rotateTarget?: AnyNode): number;
}
export interface HasOpenLeftChild extends HasLeftChild {
    isOpenLeft(leftNode: AnyNode): boolean;
}
export interface HasOpenRightChild extends HasRightChild {
    isOpenRight(rightNode: AnyNode): boolean;
}
export declare function hasLeft(arg: AnyNode): arg is HasLeftChild;
export declare function hasRight(arg: AnyNode): arg is HasRightChild;
export declare function hasOpenLeft(arg: AnyNode, vg: VisualGraph): arg is HasOpenLeftChild;
export declare function hasOpenRight(arg: AnyNode, vg: VisualGraph): arg is HasOpenRightChild;
/**
 * Интерфейс для индикации главной дочерней ноды, которая используется при наличии выделения в момент вставки ноды.
 * Дочерняя нода, помеченная getMainChild будет заменена на выделение.
 */
export interface HasMainChild extends INonTerminal {
    getMainChild(): AnyNode;
}
export declare function hasMainChild(arg: AnyNode): arg is HasMainChild;
export declare function isAnyNode(arg: any): arg is AnyNode;
