/**
 * @hidden
 * @packageDocumentation
 */
import { AbsNode, AndNode, ApproxEqualsNode, BinaryOperationNodeVisitor, BracketsNodeVisitor, ClosedIntervalNode, CommaNode, ConstantNode, DifferentialNode, EmptysetVariableNode, EqualsNode, GreaterOrEqualsNode, GreaterThanNode, GreekVariableNode, IncludeSetNode, InfSupNameNode, IntersectionSetNode, LatinVariableNode, LeftClosedIntervalNode, LessOrEqualsNode, LessThanNode, LnNode, MinMaxNode, MinusNode, MultiplyNode, NotEqualsNode, NumsetVariableNode, OpenBracketsNode, OperatorNameNode, OperatorNameVisitor, OrNode, PlusNode, RightClosedIntervalNode, SetNode, TrigNameNode, UndefinedNode, UnionSetNode, ValueNode, VerticalBarNode } from "../../model/model-math";
import { NothingNode, RawNode, TerminalVisitor } from "../../model/model-base";
export declare class BinaryOperationLatexSymbol implements BinaryOperationNodeVisitor<string> {
    static instance: BinaryOperationLatexSymbol;
    visitEquals(node: EqualsNode): string;
    visitGreaterOrEquals(node: GreaterOrEqualsNode): string;
    visitApproxEquals(node: ApproxEqualsNode): string;
    visitGreaterThan(node: GreaterThanNode): string;
    visitLessOrEquals(node: LessOrEqualsNode): string;
    visitLessThan(node: LessThanNode): string;
    visitMinus(node: MinusNode): string;
    visitMultiply(node: MultiplyNode): string;
    visitNotEquals(node: NotEqualsNode): string;
    visitPlus(node: PlusNode): string;
    visitComma(node: CommaNode): string;
    visitIntersection(node: IntersectionSetNode): string;
    visitUnion(node: UnionSetNode): string;
    visitAnd(node: AndNode): string;
    visitOr(node: OrNode): string;
    visitInclude(node: IncludeSetNode): string;
    visitVerticalBar(node: VerticalBarNode): string;
}
export declare class BracketsLatexSymbol implements BracketsNodeVisitor<{
    left: string;
    right: string;
}> {
    static instance: BracketsLatexSymbol;
    visitClosed(node: ClosedIntervalNode): {
        left: string;
        right: string;
    };
    visitLeftClosed(node: LeftClosedIntervalNode): {
        left: string;
        right: string;
    };
    visitOpen(node: OpenBracketsNode): {
        left: string;
        right: string;
    };
    visitRightClosed(node: RightClosedIntervalNode): {
        left: string;
        right: string;
    };
    visitSet(node: SetNode): {
        left: string;
        right: string;
    };
    visitAbs(node: AbsNode): {
        left: string;
        right: string;
    };
    visitMinMax(node: MinMaxNode): {
        left: string;
        right: string;
    };
}
export declare class TerminalLatexSymbol implements TerminalVisitor<string> {
    static instance: TerminalLatexSymbol;
    visitRaw(node: RawNode): string;
    visitOperatorName(node: OperatorNameNode): string;
    visitConstant(node: ConstantNode): string;
    visitUndefined(node: UndefinedNode): string;
    visitLatin(node: LatinVariableNode): string;
    visitGreek(node: GreekVariableNode): string;
    visitNumset(node: NumsetVariableNode): string;
    visitEmptyset(node: EmptysetVariableNode): string;
    visitNothing?(node: NothingNode): string;
    visitValue(node: ValueNode): string;
}
export declare class OperatorNameLatexSymbol implements OperatorNameVisitor<string> {
    static instance: OperatorNameLatexSymbol;
    visitDiff(node: DifferentialNode): string;
    visitLn(node: LnNode): string;
    visitTrigName(node: TrigNameNode): string;
    visitInfSup(node: InfSupNameNode): string;
}
