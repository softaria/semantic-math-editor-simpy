/**
 * @hidden
 * @packageDocumentation
 */
import { BasicEditor, Editor, EditorState, NavDirection, Stateful } from "./editor";
import { ConfirmRequiredOperation } from "../engine/internal-engine";
import { InsertOperation } from "../model/insert-operation";
import { LevelLocation, VisualGraph } from "../structure/visual-levels";
import { AnyNode, RootNode, Terminal, TerminalPointer } from "../model/model-base";
import { SemanticContext } from "../engine/semantic-context";
import { HorizontalDirection, VerticalDirection } from "../engine/utils";
import { CursorPosition } from "../model/cursor-position";
import { Selection } from "../engine/selection/selection";
export interface SelectionEditor extends Editor {
    readonly selection: Selection;
    selectionStep(nav: NavDirection): boolean;
    createSelection(startPointer: TerminalPointer, stop: Terminal, horizontalDirection: HorizontalDirection, verticalDirection: VerticalDirection): boolean;
    moveSelectionHorizontalBoundary(leftBoundary: boolean, direction: HorizontalDirection): boolean;
    moveSelectionVerticalBoundary(topBoundary: boolean, direction: VerticalDirection): boolean;
    dropSelection(putCursorAtSelectionEnd: boolean): boolean;
    copy(): string;
    copyTree(): AnyNode;
    cut(): string;
    paste(s: string): void;
    pasteInsertOperation(insertOperation: InsertOperation): void;
    clone(): SelectionEditor;
}
declare class LocalClipboard {
    text: string;
}
export declare const clipboard: LocalClipboard;
export declare class SelectionEditorImpl implements SelectionEditor, Stateful<SelEditorState> {
    private _selection;
    readonly editor: BasicEditor;
    constructor(editor: BasicEditor);
    rebuildVisualGraph(): void;
    get selection(): Selection;
    private initSelection;
    selectionStep(navDirection: NavDirection): boolean;
    createSelection(startPointer: TerminalPointer, stop: Terminal, horizontalDirection: HorizontalDirection, verticalDirection: VerticalDirection): boolean;
    moveSelectionHorizontalBoundary(leftBoundary: boolean, direction: HorizontalDirection): boolean;
    moveSelectionVerticalBoundary(topBoundary: boolean, direction: VerticalDirection): boolean;
    dropSelection(putCursorAtSelectionEnd: boolean): boolean;
    private removeSelection;
    set onUpdate(value: () => void);
    handleInsertOperation(insertOperation: InsertOperation, log?: boolean, beforeHintPointerAcceptor?: (pointer: TerminalPointer) => void): boolean;
    clone(): SelectionEditorImpl;
    clear(): void;
    handleDeleteOperation(direction: HorizontalDirection, askToForce: boolean, log?: boolean, beforeHintPointerAcceptor?: (pointer: TerminalPointer) => void, statusCallback?: (success: boolean) => void): ConfirmRequiredOperation;
    private deleteSelectedSymbols;
    paste(text: string, log?: boolean): void;
    pasteInsertOperation(insertOperation: InsertOperation, log?: boolean): void;
    parseLatexInsertOperation(text: string): InsertOperation;
    cut(): string;
    copyTree(): AnyNode;
    copy(): string;
    placeCursorAtPointer(pointer: TerminalPointer, log?: boolean): void;
    navigate(where: NavDirection, skipBackToParent?: boolean): boolean;
    moveToLevelEdge(direction: HorizontalDirection, skipBackToParent?: boolean): boolean;
    setRoot(root: RootNode): void;
    setToBaseVisualLevel(): void;
    skipSymbol(skipBackToParent: boolean): boolean;
    backToVisualParent(placeCursorAtLeft?: boolean): boolean;
    moveToVisualChild(levelLocation: LevelLocation, preferRight?: boolean): boolean;
    get visualGraph(): VisualGraph;
    getRoot(): RootNode;
    get semanticContext(): SemanticContext;
    set semanticContext(val: SemanticContext);
    get cursorPosition(): CursorPosition;
    get cursorAtBaseLevel(): boolean;
    setCursorPosition(cursorPosition: CursorPosition): void;
    restoreState(state: SelEditorState): void;
    saveState(): SelEditorState;
    fireHints(log?: boolean): void;
    replaceChild(existingChild: AnyNode, newChild: AnyNode): boolean;
    getBoundaryTerminal(left: boolean, onlyVisible?: boolean): Terminal;
}
export interface SelEditorState {
    inner: EditorState;
    selection: string | null;
}
export {};
