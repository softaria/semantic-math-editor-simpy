/**
 * @hidden
 * @packageDocumentation
 */
import { UndoRedoManagerState } from "./undo-redo-manager";
import { AnyNode, RootNode, Terminal, TerminalPointer } from "../model/model-base";
import { ConfirmRequiredOperation } from "../engine/internal-engine";
import { InsertOperation } from "../model/insert-operation";
import { NavDirection, Stateful } from "./editor";
import { LevelLocation, VisualGraph } from "../structure/visual-levels";
import { EditableGroupRoot, MultiCellEditor, MultiCellEditorImpl, MultiCellEditorState } from "./multcell-editor";
import { SemanticContext } from "../engine/semantic-context";
import { Selection } from "../engine/selection/selection";
import { HorizontalDirection, VerticalDirection } from "../engine/utils";
import { CursorPosition } from "../model/cursor-position";
export interface UndoRedoEditor extends MultiCellEditor {
    undo(): void;
    redo(): void;
    saveCurrentState(): void;
    clone(): UndoRedoEditor;
}
export declare class UndoRedoEditorImpl implements UndoRedoEditor, Stateful<UndoRedoEditorState> {
    private readonly editor;
    private readonly undoRedoManager;
    constructor(editor: MultiCellEditorImpl);
    rebuildVisualGraph(): void;
    get selection(): Selection;
    selectionStep(nav: NavDirection): boolean;
    createSelection(startPointer: TerminalPointer, stop: Terminal, horizontalDirection: HorizontalDirection, verticalDirection: VerticalDirection): boolean;
    moveSelectionHorizontalBoundary(leftBoundary: boolean, direction: HorizontalDirection): boolean;
    moveSelectionVerticalBoundary(topBoundary: boolean, direction: VerticalDirection): boolean;
    get cursorPosition(): CursorPosition;
    get cursorAtBaseLevel(): boolean;
    setCursorPosition(cursorPosition: CursorPosition): void;
    get visualGraph(): VisualGraph;
    set onUpdate(value: () => void);
    backToVisualParent(placeCursorAtLeft?: boolean): boolean;
    copyTree(): AnyNode;
    copy(): string;
    clone(): UndoRedoEditorImpl;
    cut(): string;
    getEditableGroupRoots(): EditableGroupRoot[];
    getRoot(): RootNode;
    handleDeleteOperation(direction: HorizontalDirection, askToForce: boolean, log?: boolean, beforeHintPointerAcceptor?: (pointer: TerminalPointer) => void, statusCallback?: (succes: boolean) => void): ConfirmRequiredOperation;
    handleInsertOperation(insertOperation: InsertOperation, log?: boolean, beforeHintPointerAcceptor?: (pointer: TerminalPointer) => void): boolean;
    moveToVisualChild(levelLocation: LevelLocation, preferRight?: boolean): boolean;
    navigate(where: NavDirection, skipBackToParent?: boolean): boolean;
    getBoundaryTerminal(left: boolean, onlyVisible?: boolean): Terminal;
    moveToLevelEdge(direction: HorizontalDirection, skipBackToParent?: boolean): boolean;
    paste(s: string): void;
    pasteInsertOperation(insertOperation: InsertOperation): void;
    placeCursorAtPointer(pointer: TerminalPointer, log?: boolean): void;
    redo(): void;
    setRoot(root: RootNode): void;
    get semanticContext(): SemanticContext;
    set semanticContext(val: SemanticContext);
    dropSelection(putCursorAtSelectionEnd: boolean): boolean;
    setToBaseVisualLevel(): void;
    skipSymbol(skipBackToParent: boolean): boolean;
    undo(): void;
    fireHints(): void;
    makeEditable(node: AnyNode, borderVisible: boolean, avoidParenthesesWrap: boolean, skipFireHints: boolean): void;
    saveCurrentState(): void;
    restoreState(state: UndoRedoEditorState): void;
    saveState(): UndoRedoEditorState;
    replaceChild(existingChild: AnyNode, newChild: AnyNode): boolean;
}
export interface UndoRedoEditorState {
    inner: MultiCellEditorState;
    undoRedoHistory?: UndoRedoManagerState<MultiCellEditorState>;
}
