/**
 * @hidden
 * @packageDocumentation
 */
import { RootNode, Terminal } from "../model/model-base";
import { VisualGraph, VisualSymbol } from "../structure/visual-levels";
import { EditableGroupRoot } from "./multcell-editor";
import { CursorPosition } from "../model/cursor-position";
import { SemanticContext } from "../engine/semantic-context";
export declare class Decoration {
    readonly selectedNodes: Terminal[];
    readonly askedForDeletionNodes: Terminal[];
    readonly customNodes: CustomDecoration[];
    constructor(selectedNodes: Terminal[], askedForDeletionNodes: Terminal[], customNodes: CustomDecoration[]);
}
interface CustomDecoration {
    terminals: Terminal[];
    painter: (element: any) => void;
    omitRedraw?: boolean;
    guid: string;
}
export interface Renderer {
    render(semanticTree: RootNode, visualGraph: VisualGraph, editableGroups: EditableGroupRoot[], semanticContext: SemanticContext): RenderedTree;
    renderDecorations(visualGraph: VisualGraph, editableGroups: EditableGroupRoot[], decoration: Decoration, cursor: CursorPosition): void;
    selectionMetrics: ClientRect[];
    destroy(): void;
}
export interface RenderedTree {
    metrics(vs: VisualSymbol): ClientRect[];
    cursorMetrics: ClientRect;
}
export interface DomRenderer extends Renderer {
    render(semanticTree: RootNode, visualGraph: VisualGraph, editableGroups: EditableGroupRoot[], semanticContext: SemanticContext): DomRenderedTree;
    renderDecorations(visualGraph: VisualGraph, editableGroups: EditableGroupRoot[], decoration: Decoration, cursor: CursorPosition): void;
    setFocused(focused: boolean): void;
    selectionElements: HTMLElement[];
}
export interface DomRenderedTree extends RenderedTree {
    element(target: Terminal): Element;
    cursorElement: Element;
}
export {};
