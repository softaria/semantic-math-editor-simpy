/**
 * @hidden
 * @packageDocumentation
 */
import { VisualGraph } from "../structure/visual-levels";
import { RenderedTree } from "./editor-support";
import { VerticalDirection } from "../engine/utils";
import { TerminalPointer } from "../model/model-base";
import { CursorPosition } from "../model/cursor-position";
export declare class UpDownHandler {
    private readonly visualGraph;
    private readonly cursorPosition;
    private readonly renderedTree;
    constructor(visualGraph: VisualGraph, renderedTree: RenderedTree, cursorPosition: CursorPosition);
    /**
     * This navigation method resides here in DomBinder, as in contrast to moving right/left,
     * it is based on geometry. So, it needs to access DOM model to measure real distances between DOM elements
     *
     * What it does? Moves cursor up or down.
     * How?
     * 1) get all the elements with katexId
     * 2) Skip those of them that are not higher (or lower) than our element
     * 3) Skip all the elements, belonging to the same visual level as our current element (to prevent possible horizontal cursor movement)
     * 4) Calculate distances bewteen currect cursor position and all possible positions near the elements we did not yet skip
     * (When calculating the position we choose top point of the cursor if going up and bottom point of the cursor when going down.
     * We consider both: left and right position of the cursor for each element.)
     * 5) Choose target cursor position with minimal distance.
     * 6) Place cursor their
     * @param {VerticalDirection} direction if we go up or down
     */
    moveUpOrDown(direction: VerticalDirection): TerminalPointer;
    private getPotentialUpOrDownTargets;
    private getPotentialParentTargets;
    private collectAvailableChildTargets;
    private collectAvailableTargetsByParent;
    private collectVisualLevelTerminals;
    private getClosest;
}
