/**
 * @hidden
 * @packageDocumentation
 */
import { Engine } from "../engine/engine";
import { InsertOperation } from "../model/insert-operation";
import { ConfirmRequiredOperation } from "../engine/internal-engine";
import { AnyNode, NothingNode, RootNode, Terminal, TerminalPointer } from "../model/model-base";
import { LevelLocation, VisualGraph } from "../structure/visual-levels";
import { SemanticContext } from "../engine/semantic-context";
import { HorizontalDirection, VerticalDirection } from "../engine/utils";
import { CursorPosition, CursorPositionImpl } from "../model/cursor-position";
export declare enum NavDirection {
    left = "left",
    right = "right",
    home = "home",
    end = "end",
    up = "up",
    down = "down"
}
export declare namespace NavDirection {
    function fromHorizontalDirection(direction: HorizontalDirection): NavDirection;
    function fromVerticalDirection(direction: VerticalDirection): NavDirection;
}
export interface Stateful<T> {
    saveState(): T;
    restoreState(state: T): void;
}
export interface Editor {
    handleDeleteOperation(direction: HorizontalDirection, askToForce: boolean, log?: boolean, beforeHintPointerAcceptor?: (pointer: TerminalPointer) => void, statusCallback?: (deletionSucceed: boolean) => void): ConfirmRequiredOperation;
    handleInsertOperation(insertOperation: InsertOperation, log?: boolean, beforeHintPointerAcceptor?: (pointer: TerminalPointer) => void): boolean;
    setToBaseVisualLevel(): void;
    backToVisualParent(placeCursorAtLeft?: boolean): boolean;
    moveToVisualChild(levelLocation: LevelLocation, preferRight?: boolean): boolean;
    skipSymbol(skipBackToParent: boolean): boolean;
    navigate(where: NavDirection, skipBackToParent?: boolean): boolean;
    getBoundaryTerminal(left: boolean, onlyVisible?: boolean): Terminal;
    moveToLevelEdge(direction: HorizontalDirection, skipBackToParent?: boolean): boolean;
    placeCursorAtPointer(terminalPointer: TerminalPointer, log?: boolean): void;
    cursorPosition: CursorPosition;
    cursorAtBaseLevel: boolean;
    setCursorPosition(cursorPosition: CursorPosition): void;
    visualGraph: VisualGraph;
    getRoot(): RootNode;
    setRoot(root: RootNode): void;
    semanticContext: SemanticContext;
    onUpdate: () => void;
    fireHints(): void;
    rebuildVisualGraph(): void;
    clone(): Editor;
    replaceChild(existingChild: AnyNode, newChild: AnyNode): boolean;
}
export declare class BasicEditor implements Editor, Stateful<EditorState> {
    readonly cursorPosition: CursorPositionImpl;
    private readonly engine;
    private _visualGraph;
    onUpdate: () => void;
    deletionFilter: (terminal: Terminal) => boolean;
    nodesWithForcedVisibility: () => NothingNode[];
    constructor(engine: Engine);
    get visualGraph(): VisualGraph;
    get cursorAtBaseLevel(): boolean;
    private changeCursorTerminal;
    setCursorPosition(cursorPosition: CursorPosition): void;
    setRoot(root: RootNode): void;
    clone(): BasicEditor;
    getRoot(): RootNode;
    get semanticContext(): SemanticContext;
    set semanticContext(val: SemanticContext);
    rebuildVisualGraph(): void;
    fireHints(log?: boolean): void;
    replaceChild(existingChild: AnyNode, newChild: AnyNode): boolean;
    placeCursorAtPointer(terminalPointer: TerminalPointer, log?: boolean): void;
    handleDeleteOperation(direction: HorizontalDirection, askToForce: boolean, log?: boolean, beforeHintPointerAcceptor?: (terminalPointer: TerminalPointer) => void, statusCallback?: (success: boolean) => void): ConfirmRequiredOperation;
    handleInsertOperation(insertOperation: InsertOperation, log?: boolean, beforeHintPointerAcceptor?: (pointer: TerminalPointer) => void): boolean;
    handlePointerInsertOperation(insertOperation: InsertOperation, terminalPointer?: TerminalPointer, log?: boolean, beforeHintPointerAcceptor?: (pointer: TerminalPointer) => void): void;
    clear(): void;
    setToBaseVisualLevel(): void;
    backToVisualParent(placeCursorAtLeft?: boolean): boolean;
    navigate(where: NavDirection, skipBackToParent?: boolean): boolean;
    getBoundaryTerminal(left: boolean, onlyVisible?: boolean): Terminal;
    private navigateLeftOrRight;
    private navigateHomeOrEnd;
    moveToLevelEdge(direction: HorizontalDirection, skipBackToParent?: boolean): boolean;
    private moveLeftOrRight;
    private stepLeftOrRight;
    skipSymbol(skipBackToParent: boolean): boolean;
    moveToVisualChild(levelLocation: LevelLocation, preferRight?: boolean): boolean;
    private moveToVisualChildExt;
    private backToParentFrom;
    restoreState(state: EditorState): void;
    saveState(): EditorState;
}
export interface EditorState {
    expression: string;
    cursor: {
        left: string | null;
        right: string | null;
    };
    context: string;
}
