/**
 * @hidden
 * @packageDocumentation
 */
import { AnyNode, NothingNode, Terminal, TerminalPointer } from "../model/model-base";
import { SpaceContainer } from "../model/model-math";
import { HorizontalDirection, VerticalDirection } from "../engine/utils";
export declare function buildVisualGraph(node: AnyNode, skipNothingNodes?: boolean, forceVisibility?: NothingNode[], forceCellVisibility?: boolean): VisualGraph;
export declare enum LevelLocation {
    up = "up",
    down = "down",
    inside = "inside"
}
export interface VisualLevelHolder {
    acceptLevelHolder<T>(visitor: VisualLevelHolderVisitor<T>): T;
}
export interface VisualLevelHolderVisitor<T> {
    visitSymbol(holder: VisualSymbol): T;
    visitSpace(holder: VisualSpace): T;
}
export declare class VisualSymbolLocationProvider implements VisualLevelHolderVisitor<LevelLocation> {
    private readonly vs;
    constructor(vs: VisualSymbol);
    visitSpace(holder: VisualSpace): LevelLocation;
    visitSymbol(holder: VisualSymbol): LevelLocation;
    private checkAmongSymbols;
}
export declare class VisualSymbolCollector implements VisualContainerVisitor<VisualSymbol[]> {
    static readonly instance: VisualSymbolCollector;
    visitLevel(levelOrSpace: VisualLevel): VisualSymbol[];
    visitSpace(levelOrSpace: VisualSpace): VisualSymbol[];
}
export declare class VisualSymbol implements VisualLevelHolder {
    readonly level: VisualLevel;
    readonly terminal: Terminal;
    hasMultipleCursorPositions: boolean;
    readonly subLevels: {
        [loc: number]: VisualContainer;
    };
    horizontalNavigationLevel: VisualContainer;
    leftNeighbor: VisualSymbol;
    rightNeighbor: VisualSymbol;
    constructor(level: VisualLevel, terminal: Terminal);
    acceptLevelHolder<T>(visitor: VisualLevelHolderVisitor<T>): T;
    get upLevel(): VisualContainer;
    get downLevel(): VisualContainer;
    get insideLevel(): VisualContainer;
    getSubLevels(): VisualContainer[];
    getSubLevelLocation(subLevel: VisualContainer): LevelLocation | null;
    getSubLevelLocations(): LevelLocation[];
    createChildLevel(levelLocation: LevelLocation): VisualLevel;
    createChildSpace(levelLocation: LevelLocation, rows: number, columns: number): VisualSpace;
    getNeighbor(isLeft: boolean): VisualSymbol;
    getNearestVisible(isLeft: boolean, excludeSelf?: boolean): VisualSymbol;
    getPointer(left: boolean): TerminalPointer;
}
export interface VisualContainer {
    acceptContainer<T>(visitor: VisualContainerVisitor<T>): T;
    add(terminal: Terminal): VisualSymbol;
    forEachLevel(handler: (vs: VisualLevel) => void): any;
    contains(terminal: Terminal): boolean;
    getBoundary(left: boolean): VisualSymbol;
    readonly parent: VisualLevelHolder;
}
export interface VisualContainerVisitor<T> {
    visitLevel(levelOrSpace: VisualLevel): T;
    visitSpace(levelOrSpace: VisualSpace): T;
}
export declare class VisualLevel implements VisualContainer {
    readonly symbols: VisualSymbol[];
    readonly parent: VisualLevelHolder;
    constructor(parent: VisualLevelHolder);
    forEachLevel(handler: (vs: VisualLevel) => void): void;
    contains(terminal: Terminal): boolean;
    add(terminal: Terminal): VisualSymbol;
    getBoundary(left: boolean): VisualSymbol;
    acceptContainer<T>(visitor: VisualContainerVisitor<T>): T;
}
export declare class VisualSpace implements VisualLevelHolder, VisualContainer {
    readonly innerLevels: VisualLevel[][];
    readonly rows: number;
    readonly columns: number;
    readonly parent: VisualSymbol;
    private currentRow;
    private currentColumn;
    constructor(parent: VisualSymbol, rows: number, columns: number);
    get spaceContainer(): SpaceContainer;
    forEachLevel(handler: (vs: VisualLevel) => void): void;
    contains(terminal: Terminal): boolean;
    add(terminal: Terminal): VisualSymbol;
    nextLevel(): VisualLevel;
    getBoundary(left: boolean): VisualSymbol;
    getNeighborLevel(level: VisualLevel, direction: HorizontalDirection | VerticalDirection): VisualLevel | null;
    getLevel(rowIndex: number, columnIndex: number): VisualLevel | null;
    getLevelPosition(level: VisualLevel): {
        rowIndex: number;
        columnIndex: number;
    } | null;
    private create2DArray;
    acceptContainer<T>(visitor: VisualContainerVisitor<T>): T;
    acceptLevelHolder<T>(visitor: VisualLevelHolderVisitor<T>): T;
}
export declare class VisualGraph {
    private map;
    private debugInfoMap;
    private baseLevel;
    private currentLevel;
    private currentSymbol;
    pushVisualLevel(levelLocation: LevelLocation): VisualLevel;
    pushVisualSpace(levelLocation: LevelLocation, rows: number, columns: number): VisualSpace;
    popVisualLevel(): void;
    getParentSymbol(terminal: Terminal): VisualSymbol;
    getChildLevel(terminal: Terminal, levelLocation: LevelLocation): VisualLevel;
    getNeighborSymbol(terminal: Terminal, isLeft: boolean): VisualSymbol;
    getNearestVisibleSymbol(terminal: Terminal, isLeft: boolean, excludeSelf?: boolean): VisualSymbol;
    getNeighborOrParentSymbol(terminal: Terminal, isLeft: boolean): VisualSymbol;
    getUniqueKeyset(): string[];
    getTerminalByKey(key: string): Terminal;
    private handleUnknownTerminal;
    createVisualSymbol(terminal: Terminal): VisualSymbol;
    getSymbol(terminal: Terminal): VisualSymbol;
    getVisualSymbolByKey(key: string): VisualSymbol;
    getBaseLevel(): VisualLevel;
    getAllSymbols(): VisualSymbol[];
    getAllVisibleSymbols(): VisualSymbol[];
    reset(): void;
    hasNoVisibleNeighbors(terminal: Terminal): boolean;
}
