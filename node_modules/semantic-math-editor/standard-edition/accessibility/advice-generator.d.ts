/**
 * @hidden
 * @packageDocumentation
 */
import { RootNode } from "../model/model-base";
import { AbstractBracketsNode } from "../model/model-math";
import { UndoRedoEditor } from "../editor/undo-redo-editor";
import { BracketConvertationAdvice, IAdvice, InsertionAdvice, SequenceReplacementAdvice } from "./advices";
import { BracketNodeInfo } from "./advice-utils";
import { Replacement, TerminalSequence } from "../engine/hints";
export declare class AdviceGenerator {
    protected readonly editor: UndoRedoEditor;
    constructor(editor: UndoRedoEditor);
    /**
     * Generates an unsorted list of advices acceptable in the current situation (whether something is selected or not)
     * @param omitContextDependent if you plan to use a semantic context, generate the appropriate advices separately,
     * setting this flag to true
     */
    generateAdvices(omitContextDependent?: boolean): IAdvice[];
    private findSpaceChild;
    private generateSpaceModifiedNode;
    private addSpaceReplacement;
    private generateSpaceReplacement;
    private generateSpaceReplacements;
    private static getMatch;
    protected addReplacements(adv: IAdvice[], tail: TerminalSequence, replacements: Replacement[], explicitSearchString?: string): void;
    private tryPushReplacementAdvice;
    static createReplacementAdvice(editor: UndoRedoEditor, r: Replacement, explicitSearchString: string, tail: TerminalSequence): SequenceReplacementAdvice;
    static createMatchedReplacement(editor: UndoRedoEditor, match: boolean, len: number, r: Replacement, trial: string, replaceText: string, tail: TerminalSequence, maxAdviceLength: number): SequenceReplacementAdvice;
    private static formReplacementPriority;
    private static formLabel;
    protected addInsertReplacements(adv: IAdvice[], replacements: Replacement[]): void;
    static createInsertionAdvice(editor: UndoRedoEditor, replacement: Replacement): InsertionAdvice;
    static prepareInsertReplacement(replacement: Replacement): {
        root: RootNode;
        explicitPriority: number;
    };
    static getBracketsNodeInfo(editor: UndoRedoEditor): BracketNodeInfo;
    protected addConstantAdvices(adv: IAdvice[], editor: UndoRedoEditor, inside: boolean): void;
    private generateVariableIToImathAdvice;
    private generateImathToIAdvice;
    protected addConvertationBracketsAdvices(adv: IAdvice[], node: AbstractBracketsNode, inside: boolean): void;
    protected addConvertationBracketAdvice(adv: IAdvice[], node: AbstractBracketsNode, replacementNode: AbstractBracketsNode, placeCursorInside: boolean): void;
    static generateBracketAdvice(editor: UndoRedoEditor, node: AbstractBracketsNode, replacementNode: AbstractBracketsNode, placeCursorInside: boolean, wrapMode: boolean): BracketConvertationAdvice;
}
