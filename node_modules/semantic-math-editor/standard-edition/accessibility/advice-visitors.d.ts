/**
 * @hidden
 * @packageDocumentation
 */
import { Replacement } from "../engine/hints";
import { AbstractContextAdvice, AbstractReplacementAdvice, BracketConvertationAdvice, FunctionVariableContextAdvice, IAdviceVisitor, IContextAdviceVisitor, ImathConvertationAdvice, InsertionAdvice, InsertVariableAdvice, IReplacementAdviceVisitor, PointContextAdvice, SelectionReplacementAdvice, SequenceReplacementAdvice, SpaceContainerModifierAdvice } from "./advices";
export declare class AdvicePriorityVisitor implements IReplacementAdviceVisitor<number>, IContextAdviceVisitor<number> {
    static readonly instance: IReplacementAdviceVisitor<number>;
    visitContext(adv: AbstractContextAdvice): number;
    visitPoint(adv: PointContextAdvice): number;
    visitFunctionVariable(adv: FunctionVariableContextAdvice): number;
    visitSpaceContainerModify(adv: SpaceContainerModifierAdvice): number;
    visitInsertVariable(adv: InsertVariableAdvice): number;
    visitBracketConvertation(adv: BracketConvertationAdvice): number;
    visitSelection(adv: SelectionReplacementAdvice): number;
    visitInsertion(adv: InsertionAdvice): number;
    visitSequenceReplacement(adv: SequenceReplacementAdvice): number;
    visitReplacement(adv: AbstractReplacementAdvice): number;
    private static checkValidity;
    visitImathConvertation(adv: ImathConvertationAdvice): number;
}
export declare class AdviceDescriptionPrinter implements IReplacementAdviceVisitor<string>, IContextAdviceVisitor<string> {
    static readonly instance: IAdviceVisitor<string>;
    visitContext(adv: AbstractContextAdvice): string;
    visitPoint(adv: PointContextAdvice): string;
    visitFunctionVariable(adv: FunctionVariableContextAdvice): string;
    visitSpaceContainerModify(adv: SpaceContainerModifierAdvice): string;
    visitInsertVariable(adv: InsertVariableAdvice): string;
    visitBracketConvertation(adv: BracketConvertationAdvice): string;
    visitInsertion(adv: InsertionAdvice): string;
    visitSequenceReplacement(adv: SequenceReplacementAdvice): string;
    visitReplacement(adv: AbstractReplacementAdvice): string;
    visitSelection(adv: SelectionReplacementAdvice): string;
    visitImathConvertation(adv: ImathConvertationAdvice): string;
}
export declare class AdviceTextPrinter implements IReplacementAdviceVisitor<string>, IContextAdviceVisitor<string> {
    static readonly instance: IReplacementAdviceVisitor<string>;
    private lowerCaseMode;
    constructor(lowerCaseMode?: boolean);
    visitContext(adv: AbstractContextAdvice): string;
    visitPoint(adv: PointContextAdvice): string;
    visitFunctionVariable(adv: FunctionVariableContextAdvice): string;
    visitSpaceContainerModify(adv: SpaceContainerModifierAdvice): string;
    visitInsertVariable(adv: InsertVariableAdvice): string;
    visitBracketConvertation(adv: BracketConvertationAdvice): string;
    visitInsertion(adv: InsertionAdvice): string;
    visitSequenceReplacement(adv: SequenceReplacementAdvice): string;
    visitSelection(adv: SelectionReplacementAdvice): string;
    visitReplacement(adv: AbstractReplacementAdvice): string;
    private applyCase;
    visitImathConvertation(adv: ImathConvertationAdvice): string;
}
export declare class AdviceAriaPrinter implements IReplacementAdviceVisitor<string>, IContextAdviceVisitor<string> {
    static readonly instance: IReplacementAdviceVisitor<string>;
    visitContext(adv: AbstractContextAdvice): string;
    visitPoint(adv: PointContextAdvice): string;
    visitSpaceContainerModify(adv: SpaceContainerModifierAdvice): string;
    visitBracketConvertation(adv: BracketConvertationAdvice): string;
    visitFunctionVariable(adv: FunctionVariableContextAdvice): string;
    visitInsertVariable(adv: InsertVariableAdvice): string;
    visitSelection(adv: SelectionReplacementAdvice): string;
    visitInsertion(adv: InsertionAdvice): string;
    visitSequenceReplacement(adv: SequenceReplacementAdvice): string;
    static getSpeakerText(repl: Replacement): string;
    visitReplacement(adv: AbstractReplacementAdvice): string;
    visitImathConvertation(adv: ImathConvertationAdvice): string;
}
export declare class AdviceHTMLPrinter implements IReplacementAdviceVisitor<string>, IContextAdviceVisitor<string> {
    static readonly instance: IReplacementAdviceVisitor<string>;
    private htmlTemplate;
    visitContext(adv: AbstractContextAdvice): string;
    visitPoint(adv: PointContextAdvice): string;
    visitSpaceContainerModify(adv: SpaceContainerModifierAdvice): string;
    visitBracketConvertation(adv: BracketConvertationAdvice): string;
    visitFunctionVariable(adv: FunctionVariableContextAdvice): string;
    visitInsertVariable(adv: InsertVariableAdvice): string;
    visitSelection(adv: SelectionReplacementAdvice): string;
    visitInsertion(adv: InsertionAdvice): string;
    visitSequenceReplacement(adv: SequenceReplacementAdvice): string;
    private toDiv;
    private toBold;
    private static wrap;
    visitReplacement(adv: AbstractReplacementAdvice): string;
    visitImathConvertation(adv: ImathConvertationAdvice): string;
}
export declare class AdviceApplier implements IAdviceVisitor<void>, IContextAdviceVisitor<void> {
    static readonly instance: IAdviceVisitor<void>;
    visitContext(adv: AbstractContextAdvice): void;
    visitPoint(adv: PointContextAdvice): void;
    visitFunctionVariable(adv: FunctionVariableContextAdvice): void;
    visitReplacement(adv: AbstractReplacementAdvice): void;
    private static insertAdvice;
}
