/**
 * @hidden
 * @packageDocumentation
 */
import { AbsNode, AbstractBracketsNode, BinaryOperationNode, BracketsNodeVisitor, ClosedIntervalNode, ConstantNode, DeterminantNode, DifferentialNode, DivideNode, EmptysetVariableNode, FuncNode, GreekVariableNode, InfSupNameNode, IntegralNode, LatinVariableNode, LeftClosedIntervalNode, LimNode, LnNode, LogNode, MathRootNode, MinMaxNode, NumsetVariableNode, OpenBracketsNode, OperatorNameNode, OperatorNameVisitor, PiecewiseFunctionNode, PredicateNode, PrimeNode, ProdOrSumNode, RightClosedIntervalNode, SetNode, SubIndexNode, SupIndexNode, SupSubIndexNode, SystemOfEquationsNode, TrigNameNode, UnaryMinusNode, UndefinedNode, ValueNode } from "../model/model-math";
import { AbstractCellNode, AnyNodeVisitor, CellVisitor, NestedCellNode, NonTerminal, NonTerminalVisitor, NothingNode, PlainCellNode, PrivateTerminal, RawNode, RootNode, Terminal, TerminalVisitor } from "../model/model-base";
export declare class AriaOperatorNameSpeaker implements OperatorNameVisitor<string> {
    static readonly instance: AriaOperatorNameSpeaker;
    visitTrigName(node: TrigNameNode): string;
    visitDiff(node: DifferentialNode): string;
    visitLn(node: LnNode): string;
    visitInfSup(node: InfSupNameNode): string;
}
export declare class AriaSpeaker implements AnyNodeVisitor<string>, NonTerminalVisitor<string>, TerminalVisitor<string>, CellVisitor<string> {
    static readonly instance: AriaSpeaker;
    visitTerminal(node: Terminal): string;
    visitNonTerminal(node: NonTerminal): string;
    visitRaw(node: RawNode): string;
    visitConstant(node: ConstantNode): string;
    visitUndefined(node: UndefinedNode): string;
    visitDivide(node: DivideNode): string;
    visitUnaryMinus(node: UnaryMinusNode): string;
    visitFunction(node: FuncNode): string;
    visitLim(node: LimNode): string;
    visitProdOrSum(node: ProdOrSumNode): string;
    visitLog(node: LogNode): string;
    visitValue(node: ValueNode): string;
    visitEmptyset(node: EmptysetVariableNode): string;
    visitGreek(node: GreekVariableNode): string;
    visitLatin(node: LatinVariableNode): string;
    visitNumset(node: NumsetVariableNode): string;
    visitRoot(node: RootNode): string;
    visitCell(node: AbstractCellNode): string;
    visitPlain(node: PlainCellNode): string;
    visitNested(node: NestedCellNode): string;
    visitAbstractBrackets(node: AbstractBracketsNode): string;
    visitMathRoot(node: MathRootNode): string;
    visitSup(node: SupIndexNode): string;
    visitSub(node: SubIndexNode): string;
    visitSupSub(node: SupSubIndexNode): string;
    visitPrime(node: PrimeNode): string;
    visitNothing(node: NothingNode): string;
    visitInt(node: IntegralNode): string;
    visitPrivateTerminal(node: PrivateTerminal): string;
    visitBinaryOperation(node: BinaryOperationNode): string;
    visitOperatorName(node: OperatorNameNode): string;
    visitPredicate(node: PredicateNode): string;
    visitDeterminant(node: DeterminantNode): string;
    visitSystemOfEquations(node: SystemOfEquationsNode): string;
    visitPiecewiseFunction(node: PiecewiseFunctionNode): string;
}
export declare class BracketsAriaSpeaker implements BracketsNodeVisitor<string> {
    static instance: BracketsAriaSpeaker;
    visitClosed(node: ClosedIntervalNode): string;
    visitLeftClosed(node: LeftClosedIntervalNode): string;
    visitOpen(node: OpenBracketsNode): string;
    visitRightClosed(node: RightClosedIntervalNode): string;
    visitAbs(node: AbsNode): string;
    visitMinMax(node: MinMaxNode): string;
    visitSet(node: SetNode): string;
}
