/**
 * @hidden
 * @packageDocumentation
 */
import { UndoRedoEditor } from "../editor/undo-redo-editor";
import { DomRenderer, RenderedTree } from "../editor/editor-support";
import { MouseSelection } from "./mouse-selection";
import { KeyboardShortcuts } from "./keyboard-shortcuts";
import { CopyPasteHandler } from "./copy-paste-handler";
import { FocusHandler } from "./focus-handler";
import { ConfirmRequiredOperation } from "../engine/internal-engine";
import { DomBinderNotifyUpdater, NotifyInfo, NotifyObject, NotifyUpdateInfo, NotifyUpdateObject } from "./dombinder-notify-updater";
import { DombinderA11ySpeaker } from "./dombinder-a11y-speaker";
export declare class DomBinder {
    readonly editor: UndoRedoEditor;
    private readonly renderer;
    readonly keyboardShortcuts: KeyboardShortcuts;
    readonly focusHandler: FocusHandler;
    private renderedTree;
    readonly updateNotifier: DomBinderNotifyUpdater;
    readonly speaker: DombinderA11ySpeaker;
    readonly copyPasteHandler: CopyPasteHandler;
    readonly mouseSelection: MouseSelection;
    readonly config: {
        selections: {
            frame: number;
            minDistance: number;
        };
        keybingdings: {
            navigation: boolean;
        };
    };
    constructor(editor: UndoRedoEditor, element: HTMLElement, renderer: DomRenderer);
    protected notifyOnUpdate(updateType: NotifyUpdateObject | NotifyUpdateObject[], confirmation?: ConfirmRequiredOperation, calledInsideOnUpdate?: boolean): void;
    protected notify(updateType: NotifyObject | NotifyObject[], confirmation?: ConfirmRequiredOperation, calledInsideOnUpdate?: boolean): void;
    addOnUpdate(cb: (updateInfo: NotifyUpdateInfo, confirmation: ConfirmRequiredOperation) => void): void;
    removeOnUpdate(cb: (updateInfo: NotifyUpdateInfo, confirmation: ConfirmRequiredOperation) => void): void;
    addOnNotify(cb: (updateInfo: NotifyInfo) => void): void;
    removeOnNotify(cb: (updateInfo: NotifyInfo) => void): void;
    toggleInputSymbolsReading(value: boolean): void;
    private getDecoration;
    protected render(decorationOnly?: boolean): RenderedTree;
    delete(): void;
}
