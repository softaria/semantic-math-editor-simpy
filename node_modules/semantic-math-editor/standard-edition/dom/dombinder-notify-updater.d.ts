/**
 * @hidden
 * @packageDocumentation
 */
import { ConfirmRequiredOperation } from "../engine/internal-engine";
import { HorizontalDirection } from "../engine/utils";
import { UndoRedoEditor } from "../editor/undo-redo-editor";
export interface TreeUpdateCallbacks {
    onUpdate?: (updateInfo: NotifyUpdateInfo, confirmation: ConfirmRequiredOperation) => void;
    onNotify?: (notifyInfo: NotifyInfo, confirmation: ConfirmRequiredOperation) => void;
}
export declare class NotifyUpdateInfo {
    objects: NotifyUpdateObject[];
    constructor(updates: NotifyUpdateObject[]);
}
/**
 * Basic ways to change the state of the editor.
 */
export declare enum NotifyUpdateObject {
    tree = "tree",
    cursor = "cursor",
    selection = "selection"
}
export declare class NotifyInfo {
    objects: NotifyObject[];
    constructor(updates: NotifyObject[]);
}
/**
 * Other notify stuff, doesn't count as changing state of the editor.
 */
/**
 * Other notify stuff, doesn't count as changing state of the editor.
 */
/**
 * Other notify stuff, doesn't count as changing state of the editor.
 */
/**
 * Other notify stuff, doesn't count as changing state of the editor.
 */
export declare enum NotifyObject {
    copy = "copy",
    inputTree = "inputTree",
    nonInputTree = "nonInputTree",
    assistOpen = "assistOpen",
    assistClose = "assistClose",
    assistSelect = "assistSelect",
    assistApply = "assistApply",
    failedNavigationLeft = "failedNavigationLeft",
    failedNavigationRight = "failedNavigationRight",
    failedNavigationHome = "failedNavigationHome",
    failedNavigationEnd = "failedNavigationEnd",
    failedNavigationUp = "failedNavigationUp",
    failedNavigationDown = "failedNavigationDown",
    failedSelectionLeft = "failedSelectionLeft",
    failedSelectionRight = "failedSelectionRight",
    failedSelectionHome = "failedSelectionHome",
    failedSelectionEnd = "failedSelectionEnd",
    failedSelectionUp = "failedSelectionUp",
    failedSelectionDown = "failedSelectionDown",
    failedBackspace = "failedBackspace",
    failedDelete = "failedDelete",
    empty = "empty",
    focus = "focus",
    blur = "blur",
    initialize = "initialize",
    decoration = "decoration"
}
export interface IUpdateContainer<TemplateObject, TemplateInfo> {
    notify: (type: TemplateObject[] | TemplateObject, confirmation?: ConfirmRequiredOperation, calledInsideOnUpdate?: boolean) => void;
    readonly isPaused: boolean;
    confirmOperation: ConfirmRequiredOperation;
    pauseSync(): void;
    resumeSync(insideOnUpdate: boolean): void;
    add(cb: (info: TemplateInfo, confirmation: ConfirmRequiredOperation) => void): void;
    remove(cb: (info: TemplateInfo, confirmation: ConfirmRequiredOperation) => void): void;
}
/**
 * Generic class used to handle several types of update information in the same way
 */
export declare class UpdateContainer<TemplateObject, TemplateInfo> implements IUpdateContainer<TemplateObject, TemplateInfo> {
    private _confirmOperation;
    protected pauseOnUpdate: boolean;
    protected pausedObjects: TemplateObject[];
    private innerCallbacks;
    readonly notify: (type: TemplateObject[] | TemplateObject, confirmation?: ConfirmRequiredOperation, calledInsideOnUpdate?: boolean) => void;
    constructor(type: any, externalCallback?: (info: TemplateInfo, confirmation: ConfirmRequiredOperation) => void);
    pauseSync(): void;
    resumeSync(insideOnUpdate: boolean): void;
    add(cb: (info: TemplateInfo, confirmation: ConfirmRequiredOperation) => void): void;
    remove(cb: (info: TemplateInfo, confirmation: ConfirmRequiredOperation) => void): void;
    get isPaused(): boolean;
    get confirmOperation(): ConfirmRequiredOperation;
    set confirmOperation(value: ConfirmRequiredOperation);
}
export declare class DomBinderNotifyUpdater {
    private notifyContainer;
    private updateContainer;
    private readonly editor;
    constructor(editor: UndoRedoEditor, externalCallbacks?: TreeUpdateCallbacks);
    addOnUpdate(cb: (updateInfo: NotifyUpdateInfo, confirmation: ConfirmRequiredOperation) => void): void;
    removeOnUpdate(cb: (updateInfo: NotifyUpdateInfo, confirmation: ConfirmRequiredOperation) => void): void;
    addOnNotify(cb: (updateInfo: NotifyInfo) => void): void;
    removeOnNotify(cb: (updateInfo: NotifyInfo) => void): void;
    pauseSync(): void;
    resumeSync(insideOnUpdate: boolean): void;
    notifyOnUpdate(updateType: NotifyUpdateObject | NotifyUpdateObject[], confirmation?: ConfirmRequiredOperation, calledInsideOnUpdate?: boolean): void;
    notify(updateType: NotifyObject | NotifyObject[], confirmation?: ConfirmRequiredOperation, calledInsideOnUpdate?: boolean): void;
    isPaused(): boolean;
    getCurrentConfirmOperation(): ConfirmRequiredOperation;
    resetConfirmOperation(): void;
    confirmCurrentOperation(direction: HorizontalDirection): boolean;
}
