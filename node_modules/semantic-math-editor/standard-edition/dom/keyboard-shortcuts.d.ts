/**
 * @hidden
 * @packageDocumentation
 */
/// <reference types="mousetrap" />
import { UndoRedoEditor } from "../editor/undo-redo-editor";
import { NavDirection } from "../editor/editor";
import { HorizontalDirection, VerticalDirection } from "./main";
import { RenderedTree } from "../editor/editor-support";
import { ConfirmRequiredOperation } from "../engine/internal-engine";
import { Point } from "../model/utils";
import { AdviceManager } from "../accessibility/advice-manager";
import { AdviceHtmlContainer, AdviceListPopup } from "../ui/advice-list-popup";
import { IAdvice } from "../accessibility/advices";
export interface KeyboardShortcutPermissions {
    isLocked(): boolean;
    isReadOnly(): boolean;
    navigationAllowed(): boolean;
}
export interface NavigationStepDescriptor {
    moved: boolean;
    direction: NavDirection;
    atBaseLevel: boolean;
}
export interface SelectionStepDescriptor {
    selected: boolean;
    direction: NavDirection;
}
export declare enum ChangeDescriptor {
    advice = "advice",
    paste = "paste",
    undo = "undo",
    redo = "redo",
    delete = "delete",
    failedBackspace = "failedBackspace",
    failedDelete = "failedDelete"
}
export interface KeyboardShortcutsCallbacks {
    onSelection(descriptor: SelectionStepDescriptor): void;
    onNavigation(descriptor: NavigationStepDescriptor): void;
    onInputChange(hadSelection: boolean): void;
    onChange(descriptor: ChangeDescriptor, hadSelection: boolean): void;
    onAdviceShow(): void;
    onAdviceHide(): void;
    onAdviceSelect(adv: IAdvice): void;
    onAdviceApply(adv: IAdvice): void;
    onEnter(): void;
    askConfirm(confirmOperation: ConfirmRequiredOperation): void;
    isConfirmed(direction: HorizontalDirection): boolean;
}
export declare class KeyboardShortcuts {
    undoRedoEnabled: boolean;
    protected readonly mousetrap: MousetrapInstance;
    protected readonly callbacks: KeyboardShortcutsCallbacks;
    protected readonly getRenderedTree: () => RenderedTree;
    readonly element: HTMLElement;
    readonly permissions: KeyboardShortcutPermissions;
    readonly hintListPopup: AdviceListPopup;
    readonly adviceManager: AdviceManager;
    protected storedAdvices: IAdvice[];
    readonly editor: UndoRedoEditor;
    private readonly eventRemover;
    constructor(element: HTMLElement, editor: UndoRedoEditor, getRenderedTree: () => RenderedTree, permissions: KeyboardShortcutPermissions, callbacks: KeyboardShortcutsCallbacks, adviceManager: AdviceManager);
    destroy(): void;
    lockUserInput(lock: boolean): void;
    private keyPress;
    handleKey(str: string): void;
    private insertKeyOperation;
    /**
    * @param {VerticalDirection} direction
    * @return {boolean} true if navigation happened (there was somewhere to go)
    */
    navigateVertically(direction: VerticalDirection): void;
    deleteOneAtCursor(direction: HorizontalDirection, force?: boolean): void;
    resetShortcuts(): void;
    setupShortcuts(): void;
    showAdviceBox(advices: IAdvice[], showInLocked?: boolean): this;
    protected showConcretizeBox(advices: IAdvice[]): this;
    hideAdviceBox(): void;
    protected mapAdvices(startIndex: number): AdviceHtmlContainer[];
    applyAdvice(adv: IAdvice): void;
    paste(str: string): void;
    undo(): void;
    redo(): void;
    navigate(direction: NavDirection): void;
    select(direction: NavDirection): void;
    moveSelectionHorizontalBoundary(left: boolean, direction: HorizontalDirection): void;
    moveSelectionVerticalBoundary(top: boolean, direction: VerticalDirection): void;
    selectAll(): void;
    protected filterAdvices(filterString: string): void;
    protected requestMoreAdvices(startIndex: number): void;
    protected calculatePosition(): Point;
}
