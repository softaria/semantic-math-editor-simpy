/**
 * @hidden
 * @packageDocumentation
 */
import { AnyNode, RawNode, Terminal, TerminalPointer } from "../model/model-base";
import { HiddenMultiplyNode, PrimeNode, SpaceContainer, ValueNode } from "../model/model-math";
import { Point } from "../model/utils";
export declare enum HorizontalDirection {
    left = "left",
    right = "right"
}
export declare namespace HorizontalDirection {
    function opposite(direction: HorizontalDirection): HorizontalDirection;
}
export declare enum VerticalDirection {
    up = "up",
    down = "down"
}
export declare namespace VerticalDirection {
    function opposite(direction: VerticalDirection): VerticalDirection;
}
export declare function findPrimeNumber(node: PrimeNode): {
    child: AnyNode;
    primeNodes: PrimeNode[];
};
export declare function joinNodes(n1: AnyNode, n2: AnyNode, forceJoin?: boolean): AnyNode;
export declare function isValueOrHiddenMultiply(node: AnyNode): node is ValueNode | HiddenMultiplyNode;
export declare function isRawOrHiddenMultiply(node: AnyNode): node is RawNode | HiddenMultiplyNode;
export declare function collectValueNodes(node: ValueNode | HiddenMultiplyNode): ValueNode[] | undefined;
export declare function collectStringNodes(node: RawNode | HiddenMultiplyNode): RawNode[] | undefined;
export declare function getIntegerValueNode(node: ValueNode | HiddenMultiplyNode): number | undefined;
export declare function getPositiveIntegerValueNode(node: ValueNode | HiddenMultiplyNode): number | undefined;
export declare function cleanUp(source: AnyNode, cleanUpHandlers: ((node: AnyNode) => void)[]): AnyNode;
export declare function cleanUpCell(clone: AnyNode): void;
export declare function convertToReversedFunction(powerParentNode: AnyNode): {
    rightBoundary: Terminal;
    child: AnyNode;
    minus: Terminal;
    one: Terminal;
};
export declare function isPlainTextByNode(node: AnyNode): any;
export declare function getSpacePointerAfterReplacement(parent: SpaceContainer, pointer: TerminalPointer, lastElementPosition: Point): TerminalPointer;
