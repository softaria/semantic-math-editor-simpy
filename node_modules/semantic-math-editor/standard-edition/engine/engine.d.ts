/**
 * @hidden
 * @packageDocumentation
 */
import { InternalEngine, PostDeleteOperation } from "./internal-engine";
import { HintManager } from "./hint-manager";
import { InsertOperation } from "../model/insert-operation";
import { AnyNodeVisitor, RootNode, Terminal, TerminalPointer } from "../model/model-base";
import { DotPrinter } from "./dot-printer";
import { SemanticContext } from "./semantic-context";
import { HorizontalDirection } from "./utils";
export declare class Engine {
    private ie;
    private hintManager;
    private _dotPrinter;
    constructor(ie: InternalEngine, hintManager: HintManager);
    set dotPrinter(dotPrinter: DotPrinter);
    setRoot(rootNode: RootNode): void;
    accept<T>(visitor: AnyNodeVisitor<T>): T;
    getRoot(): RootNode;
    get semanticContext(): SemanticContext;
    set semanticContext(val: SemanticContext);
    clear(): void;
    fireHints(pointer: TerminalPointer, log?: boolean): TerminalPointer;
    handleInsertOperation(insertOperation: InsertOperation, terminalPointer: TerminalPointer, log?: boolean, beforeHintPointerAcceptor?: (pointer: TerminalPointer) => void): TerminalPointer;
    handleDeleteOperation(force: boolean, direction: HorizontalDirection, terminal: Terminal, cursorTerminal: Terminal, log?: boolean, beforeHintPointerAcceptor?: (pointer: TerminalPointer) => void): PostDeleteOperation;
    private handleInsertion;
    private handleSpaceContainerInsertOperation;
    private handleDeletion;
}
