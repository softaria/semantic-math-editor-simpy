/**
 * @hidden
 * @packageDocumentation
 */
import { InsertOperation } from "../model/insert-operation";
import { AnyNode, PrivateTerminal, RootNode, Terminal, TerminalPointer } from "../model/model-base";
import { HorizontalDirection } from "./utils";
export declare class InternalEngine {
    private root;
    setRoot(rootNode: RootNode): void;
    getRoot(): RootNode;
    clear(): void;
    handleDeletionFromNonTerminal(n: PrivateTerminal, direction: HorizontalDirection, force: boolean, cursorTerminal: Terminal): PostDeleteOperation;
    handleDeletionFromTerminal(node: Terminal, direction: HorizontalDirection): PostDeleteOperation;
    handleInsertionIntoRoot(insertionResult: InsertOperation): TerminalPointer;
    handleInsertionIntoPointer(pointer: TerminalPointer, ir: InsertOperation): TerminalPointer;
    private handleInsertionIntoNonTerminal;
    private handleInsertionIntoTerminal;
}
export declare abstract class PostDeleteOperation {
    abstract accept<T>(visitor: PostDeleteOperationVisitor<T>): T;
}
export interface PostDeleteOperationVisitor<T> {
    doPlaceCursor(r: PlaceCursorOperation): T;
    doHighlight(r: ConfirmRequiredOperation): T;
    doNothing(): T;
}
export declare class PlaceCursorOperation extends PostDeleteOperation {
    readonly pointer: TerminalPointer;
    constructor(pointer: TerminalPointer);
    accept<T>(visitor: PostDeleteOperationVisitor<T>): T;
}
export declare class DoNothingOperation extends PostDeleteOperation {
    accept<T>(visitor: PostDeleteOperationVisitor<T>): T;
}
export declare class ConfirmRequiredOperation extends PostDeleteOperation {
    readonly highlightedSymbolds: Terminal[];
    readonly affectedNode: {
        node: AnyNode;
        children?: AnyNode[];
    };
    direction: HorizontalDirection;
    constructor(highlightedSymbolds: Terminal[], affectedNode: {
        node: AnyNode;
        children?: AnyNode[];
    }, direction: HorizontalDirection);
    accept<T>(visitor: PostDeleteOperationVisitor<T>): T;
}
export declare abstract class DeleteOperationResult {
    abstract accept<T>(visitor: DeleteOperationVisitor<T>): T;
}
interface DeleteOperationVisitor<T> {
    visitDelete(result: DeleteOperationDelete): T;
    visitReplace(result: DeleteOperationReplace): T;
    visitDeny(result: DeleteOperationProhibited): T;
    visitConfirm(result: DeleteOperationForceRequired): T;
}
export declare class DeleteOperationReplace extends DeleteOperationResult {
    readonly node: AnyNode;
    readonly terminalPointer: TerminalPointer;
    constructor(node: AnyNode, terminalPointer: TerminalPointer);
    accept<T>(visitor: DeleteOperationVisitor<T>): T;
}
export declare class DeleteOperationProhibited extends DeleteOperationResult {
    accept<T>(visitor: DeleteOperationVisitor<T>): T;
}
export declare class DeleteOperationDelete extends DeleteOperationResult {
    accept<T>(visitor: DeleteOperationVisitor<T>): T;
}
export declare class DeleteOperationForceRequired extends DeleteOperationResult {
    readonly highlightedSymbolds: Terminal[];
    readonly affectedNode: {
        node: AnyNode;
        children?: AnyNode[];
    };
    constructor(highlightedSymbolds: Terminal[], affectedNode: {
        node: AnyNode;
        children?: AnyNode[];
    });
    accept<T>(visitor: DeleteOperationVisitor<T>): T;
}
export {};
