/**
 * @hidden
 * @packageDocumentation
 */
import { AnyNode, Terminal, TerminalPointer } from "../../model/model-base";
import { VisualLevel } from "../../structure/visual-levels";
import { LevelSelection } from "./level-selection";
import { SpaceSelection } from "./space-selection";
import { SelectionVisitor } from "./utils";
import { InsertOperation } from "../../model/insert-operation";
import { EmptySelection } from "./empty-selection";
export declare function getLevelParent(level: VisualLevel, range?: {
    from: number;
    to: number;
}): AnyNode;
export declare function splitTreeByLevelSelection(selection: LevelSelection): AnyNode;
export declare function splitTree(root: AnyNode, selectionStart: Terminal, selectionEnd: Terminal): AnyNode;
/**
 * We copy visual symbols under selection into new nodes concatenated via hidden multiply.
 * For every private terminal we take it's parent - non terminal and copy it. In case when selection contains
 * non terminal and it's left or right operands that located on same visual level we are removing all left and right
 * operands from non terminal. If some children nodes will be located on same visual level but won't be it's
 * left or right operand it will produce double copy. We have such non terminal - plain cell. But in this case all ok
 * due to skipping non visible visual symbol, so plain cell will be skipped while it's content will not.
 * @param selection
 */
export declare function copyTreeByLevelSelection(selection: LevelSelection): AnyNode;
export declare function copyTreeBySpaceSelection(selection: SpaceSelection): AnyNode;
export declare class SelectionCopyVisitor implements SelectionVisitor<AnyNode> {
    static readonly instance: SelectionCopyVisitor;
    visitLevel(selection: LevelSelection): AnyNode;
    visitSpace(selection: SpaceSelection): AnyNode;
    visitEmpty(selection: EmptySelection): AnyNode;
}
export declare class SelectionReplaceVisitor implements SelectionVisitor<TerminalPointer> {
    private readonly replacement;
    constructor(replacement: InsertOperation);
    visitLevel(selection: LevelSelection): TerminalPointer;
    visitSpace(selection: SpaceSelection): TerminalPointer;
    visitEmpty(selection: EmptySelection): TerminalPointer;
}
