/**
 * @hidden
 * @packageDocumentation
 */
import { VisualGraph, VisualLevel, VisualSymbol } from "../../structure/visual-levels";
import { HorizontalDirection, VerticalDirection } from "../utils";
import { AnyNode, Terminal } from "../../model/model-base";
import { TerminalSerializer } from "../../editor/terminal-serializer";
import { InnerSelection, SelectionHistory, SelectionVisitor } from "./utils";
export interface SerializedLevelSelection {
    horizontalDirection: HorizontalDirection;
    verticalDirection: VerticalDirection;
    leftSymbol: string;
    rightSymbol: string;
}
export declare class LevelSelection implements InnerSelection {
    level: VisualLevel;
    leftIndex: number;
    rightIndex: number;
    horizontalDirection: HorizontalDirection;
    verticalDirection: VerticalDirection;
    selectionHistoryManager: SelectionHistory;
    constructor(level: VisualLevel, leftIndex: number, rightIndex: number, horizontalDirection: HorizontalDirection, verticalDirection: VerticalDirection, selectionHistoryManager: SelectionHistory);
    static createFromSymbol(selectionHistoryManager: SelectionHistory, symbol: VisualSymbol, horizontalDirection: HorizontalDirection, verticalDirection: VerticalDirection, previousSelection?: InnerSelection): InnerSelection;
    static createFromLevel(selectionHistoryManager: SelectionHistory, level: VisualLevel, direction: HorizontalDirection): InnerSelection;
    static validateAndFix(selection: LevelSelection, previousSelection: InnerSelection): InnerSelection;
    get size(): number;
    get terminals(): Terminal[];
    accept<T>(visitor: SelectionVisitor<T>): T;
    serialize(terminalSerializer: TerminalSerializer): SerializedLevelSelection;
    static deserialize(selectionHistoryManager: SelectionHistory, visualGraph: VisualGraph, terminalSerializer: TerminalSerializer, serialized: SerializedLevelSelection): LevelSelection;
    get leftSymbol(): VisualSymbol;
    get rightSymbol(): VisualSymbol;
    getBoundary(direction: HorizontalDirection): VisualSymbol;
    private cloneWithBoundary;
    extendHorizontally(horizontalDirection: HorizontalDirection, verticalDirection?: VerticalDirection, extendTillSpaceCorner?: boolean): InnerSelection;
    extendVertically(direction: VerticalDirection): InnerSelection;
    extendToParentLevel(horizontalDirection: HorizontalDirection, verticalDirection?: VerticalDirection, extendTillSpaceCorner?: boolean): InnerSelection;
    shrinkHorizontally(direction: HorizontalDirection): InnerSelection;
    shrinkVertically(direction: VerticalDirection): InnerSelection;
    getSelectionParent(): AnyNode;
}
