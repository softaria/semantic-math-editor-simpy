/**
 * @hidden
 * @packageDocumentation
 */
import { AbsNode, AbstractBracketsNode, BinaryOperationNode, BracketsNodeVisitor, ClosedIntervalNode, ConstantNode, DeterminantNode, DifferentialNode, DivideNode, EmptysetVariableNode, FuncNode, GreekVariableNode, InfSupNameNode, IntegralNode, LatinVariableNode, LeftClosedIntervalNode, LimNode, LnNode, LogNode, MathRootNode, MinMaxNode, NumsetVariableNode, OpenBracketsNode, OperatorNameNode, OperatorNameVisitor, PiecewiseFunctionNode, PredicateNode, PrimeNode, ProdOrSumNode, RightClosedIntervalNode, SetNode, SubIndexNode, SupIndexNode, SupSubIndexNode, SystemOfEquationsNode, TrigNameNode, UnaryMinusNode, UndefinedNode, ValueNode } from "../model/model-math";
import { DeleteOperationResult } from "./internal-engine";
import { AbstractCellNode, AnyNodeVisitor, NonTerminal, NonTerminalVisitor, NothingNode, PrivateTerminal, RawNode, RootNode, Terminal, TerminalPointer, TerminalVisitor } from "../model/model-base";
export declare class PostInsertCursorPositioner implements AnyNodeVisitor<TerminalPointer | null>, NonTerminalVisitor<TerminalPointer | null> {
    static readonly instance: PostInsertCursorPositioner;
    private constructor();
    visitTerminal(node: Terminal): TerminalPointer | null;
    visitNonTerminal(node: NonTerminal): TerminalPointer | null;
    visitBinaryOperation(node: BinaryOperationNode): TerminalPointer | null;
    visitRoot(node: RootNode): TerminalPointer | null;
    visitUnaryMinus(node: UnaryMinusNode): TerminalPointer | null;
    visitFunction(node: FuncNode): TerminalPointer | null;
    visitLim(node: LimNode): TerminalPointer | null;
    visitLog(node: LogNode): TerminalPointer | null;
    visitCell(node: AbstractCellNode): TerminalPointer | null;
    visitAbstractBrackets(node: AbstractBracketsNode): TerminalPointer | null;
    visitMathRoot(node: MathRootNode): TerminalPointer | null;
    visitSup(node: SupIndexNode): TerminalPointer | null;
    visitSub(node: SubIndexNode): TerminalPointer | null;
    visitSupSub(node: SupSubIndexNode): TerminalPointer | null;
    visitPrime(node: PrimeNode): TerminalPointer | null;
    visitDivide(node: DivideNode): TerminalPointer | null;
    visitInt(node: IntegralNode): TerminalPointer | null;
    visitProdOrSum(node: ProdOrSumNode): TerminalPointer | null;
    visitPredicate(node: PredicateNode): TerminalPointer | null;
    visitDeterminant(node: DeterminantNode): TerminalPointer | null;
    visitSystemOfEquations(node: SystemOfEquationsNode): TerminalPointer | null;
    visitPiecewiseFunction(node: PiecewiseFunctionNode): TerminalPointer | null;
}
/**
 * Prepares replacement for deleted nonterminal.
 * Returns it via node and terminalPointer fields of NonTerminalReplacement (result field must be == 'deleted' in this case)
 * Alternatively:
 * 1) Either prohibit deletion at all (by returning NonTerminalReplacement with result=='prohibited')
 * 2) Or asks user to confirm (force) deletion  (by returning NonTerminalReplacement with result=='forceRequired')
 */
export declare class PrepareNonTerminalReplacement implements NonTerminalVisitor<DeleteOperationResult> {
    readonly node: PrivateTerminal;
    readonly force: boolean;
    readonly deletedWithBs: boolean;
    readonly cursorTerminal: Terminal;
    constructor(node: PrivateTerminal, force: boolean, deletedWithBs: boolean, cursorTerminal: Terminal);
    visitRoot(node: RootNode): DeleteOperationResult;
    visitBinaryOperation(node: BinaryOperationNode): DeleteOperationResult;
    visitUnaryMinus(node: UnaryMinusNode): DeleteOperationResult;
    visitFunction(node: FuncNode): DeleteOperationResult;
    visitDivide(node: DivideNode): DeleteOperationResult;
    visitSup(node: SupIndexNode): DeleteOperationResult;
    visitSub(node: SubIndexNode): DeleteOperationResult;
    visitSupSub(node: SupSubIndexNode): DeleteOperationResult;
    visitPrime(node: PrimeNode): DeleteOperationResult;
    visitLim(node: LimNode): DeleteOperationResult;
    visitProdOrSum(node: ProdOrSumNode): DeleteOperationResult;
    visitLog(node: LogNode): DeleteOperationResult;
    visitCell(node: AbstractCellNode): DeleteOperationResult;
    visitAbstractBrackets(node: AbstractBracketsNode): DeleteOperationResult;
    visitMathRoot(node: MathRootNode): DeleteOperationResult;
    visitInt(node: IntegralNode): DeleteOperationResult;
    visitPredicate(node: PredicateNode): DeleteOperationResult;
    visitDeterminant(node: DeterminantNode): DeleteOperationResult;
    visitSystemOfEquations(node: SystemOfEquationsNode): DeleteOperationResult;
    visitPiecewiseFunction(node: PiecewiseFunctionNode): DeleteOperationResult;
}
export declare class BracketsOperationInputName implements BracketsNodeVisitor<{
    left: string;
    right: string;
}> {
    static instance: BracketsOperationInputName;
    visitClosed(node: ClosedIntervalNode): {
        left: string;
        right: string;
    };
    visitLeftClosed(node: LeftClosedIntervalNode): {
        left: string;
        right: string;
    };
    visitOpen(node: OpenBracketsNode): {
        left: string;
        right: string;
    };
    visitRightClosed(node: RightClosedIntervalNode): {
        left: string;
        right: string;
    };
    visitAbs(node: AbsNode): {
        left: string;
        right: string;
    };
    visitMinMax(node: MinMaxNode): {
        left: string;
        right: string;
    };
    visitSet(node: SetNode): {
        left: string;
        right: string;
    };
    static getFullName(returnedName: {
        left: string;
        right: string;
    }): string;
}
export declare class TerminalInputName implements TerminalVisitor<string> {
    static instance: TerminalInputName;
    visitEmptyset(node: EmptysetVariableNode): string;
    visitGreek(node: GreekVariableNode): string;
    visitLatin(node: LatinVariableNode): string;
    visitNumset(node: NumsetVariableNode): string;
    visitConstant(node: ConstantNode): string;
    visitUndefined(node: UndefinedNode): string;
    visitRaw(node: RawNode): string;
    visitOperatorName(node: OperatorNameNode): string;
    visitNothing?(node: NothingNode): string;
    visitValue(node: ValueNode): string;
}
export declare class OperatorNameInputName implements OperatorNameVisitor<string> {
    static instance: OperatorNameInputName;
    visitDiff(node: DifferentialNode): string;
    visitLn(node: LnNode): string;
    visitTrigName(node: TrigNameNode): string;
    visitInfSup(node: InfSupNameNode): string;
}
