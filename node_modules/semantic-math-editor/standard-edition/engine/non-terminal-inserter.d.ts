/**
 * @hidden
 * @packageDocumentation
 */
import { AbstractBracketsNode, BinaryOperationNode, DeterminantNode, DivideNode, FuncNode, IntegralNode, LimNode, LogNode, MathRootNode, PiecewiseFunctionNode, PredicateNode, PrimeNode, ProdOrSumNode, SubIndexNode, SupIndexNode, SupSubIndexNode, SystemOfEquationsNode, UnaryMinusNode } from "../model/model-math";
import { AbstractCellNode, AnyNode, CellVisitor, NestedCellNode, NonTerminalVisitor, PlainCellNode, PrivateTerminal, RootNode } from "../model/model-base";
/**
 Этот класс по литералу и isLeft (по сути - по NonTerminalPointer) умеет находить позиции ввода внутри каждого узла
 Позиции бывают - слева от узла, справа от узла и где-то внутри узла.
 Если позиция где-то внутри, то он находит child-а, с ней связанного
 */
export declare class NonTerminalInsertVisitor implements NonTerminalVisitor<void>, CellVisitor<void> {
    readonly node: PrivateTerminal;
    readonly insertedNode: AnyNode;
    readonly isLeft: boolean;
    constructor(node: PrivateTerminal, isLeft: boolean, insertedNode: AnyNode);
    visitRoot(node: RootNode): void;
    private handleLeft;
    private handleRight;
    private handleChild;
    visitBinaryOperation(node: BinaryOperationNode): void;
    visitFunction(node: FuncNode): void;
    visitUnaryMinus(node: UnaryMinusNode): void;
    visitDivide(node: DivideNode): void;
    visitSup(node: SupIndexNode): void;
    visitSub(node: SubIndexNode): void;
    visitSupSub(node: SupSubIndexNode): void;
    visitPrime(node: PrimeNode): void;
    visitLim(node: LimNode): void;
    visitProdOrSum(node: ProdOrSumNode): void;
    visitLog(node: LogNode): void;
    visitMathRoot(node: MathRootNode): void;
    visitCell(node: AbstractCellNode): void;
    visitPlain(node: PlainCellNode): void;
    visitNested(node: NestedCellNode): void;
    visitAbstractBrackets(node: AbstractBracketsNode): void;
    visitInt(node: IntegralNode): void;
    visitPredicate(node: PredicateNode): void;
    visitDeterminant(node: DeterminantNode): void;
    visitSystemOfEquations(node: SystemOfEquationsNode): void;
    visitPiecewiseFunction(node: PiecewiseFunctionNode): void;
}
