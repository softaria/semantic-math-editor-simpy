/**
 * @hidden
 * @packageDocumentation
 */
import { AbstractBracketsNode, BinaryOperationNode, DeterminantNode, DivideNode, FuncNode, IntegralNode, LimNode, LogNode, MathRootNode, PiecewiseFunctionNode, PredicateNode, PrimeNode, ProdOrSumNode, SubIndexNode, SupIndexNode, SupSubIndexNode, SystemOfEquationsNode, UnaryMinusNode } from "../model/model-math";
import { AbstractCellNode, AnyNodeVisitor, CellVisitor, NestedCellNode, NonTerminal, NonTerminalVisitor, PlainCellNode, RootNode, Terminal } from "../model/model-base";
import { Selection } from "../engine/selection/selection";
export declare class PrintVisitor implements AnyNodeVisitor<string>, NonTerminalVisitor<string> {
    static instance: PrintVisitor;
    visitNonTerminal(node: NonTerminal): string;
    visitBinaryOperation(node: BinaryOperationNode): string;
    visitUnaryMinus(node: UnaryMinusNode): string;
    visitDivide(node: DivideNode): string;
    visitFunction(node: FuncNode): string;
    visitLim(node: LimNode): string;
    visitLog(node: LogNode): string;
    visitCell(node: AbstractCellNode): string;
    visitAbstractBrackets(node: AbstractBracketsNode): string;
    visitProdOrSum(node: ProdOrSumNode): string;
    visitMathRoot(node: MathRootNode): string;
    visitSup(node: SupIndexNode): string;
    visitSub(node: SubIndexNode): string;
    visitSupSub(node: SupSubIndexNode): string;
    visitPrime(node: PrimeNode): string;
    visitRoot(node: RootNode): string;
    visitTerminal(node: Terminal): string;
    visitInt(node: IntegralNode): string;
    visitPredicate(node: PredicateNode): string;
    visitDeterminant(node: DeterminantNode): string;
    visitSystemOfEquations(node: SystemOfEquationsNode): string;
    visitPiecewiseFunction(node: PiecewiseFunctionNode): string;
}
export declare class SelectionPrinter implements AnyNodeVisitor<string>, NonTerminalVisitor<string>, CellVisitor<string> {
    readonly selection: Selection;
    constructor(selection: Selection);
    private type;
    visitNonTerminal(node: NonTerminal): string;
    visitBinaryOperation(node: BinaryOperationNode): string;
    visitDivide(node: DivideNode): string;
    visitUnaryMinus(node: UnaryMinusNode): string;
    visitFunction(node: FuncNode): string;
    visitLim(node: LimNode): string;
    visitProdOrSum(node: ProdOrSumNode): string;
    visitLog(node: LogNode): string;
    visitRoot(node: RootNode): string;
    visitCell(node: AbstractCellNode): string;
    visitNested(node: NestedCellNode): string;
    visitPlain(node: PlainCellNode): string;
    visitAbstractBrackets(node: AbstractBracketsNode): string;
    visitMathRoot(node: MathRootNode): string;
    visitSup(node: SupIndexNode): string;
    visitSub(node: SubIndexNode): string;
    visitSupSub(node: SupSubIndexNode): string;
    visitPrime(node: PrimeNode): string;
    visitTerminal(node: Terminal): string;
    visitInt(node: IntegralNode): string;
    visitPredicate(node: PredicateNode): string;
    visitDeterminant(node: DeterminantNode): string;
    visitSystemOfEquations(node: SystemOfEquationsNode): string;
    visitPiecewiseFunction(node: PiecewiseFunctionNode): string;
}
