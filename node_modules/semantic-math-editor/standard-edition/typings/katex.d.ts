declare module "katex" {

    export type SettingsOptions = {
        displayMode?: boolean;
        throwOnError?: boolean;
        errorColor?: string;
        macros?: any;
        colorIsTextColor?: boolean;
        unicodeTextInMathMode?: boolean;
        maxSize?: number;
        groupPostprocessor?: (group: any, options: any, groupNode: VirtualDomNode) => void;
    };

    export type Hyperscript = (
        selector: string,
        properties?: { [string]: string | { [string]: string } },
        children?: (VNode | string)[])
        => VNode;

    export interface VirtualDomNode {
        toNode(): Node;
        toMarkup(): string;
        toHyperNode(h: Hyperscript): VirtualDOM.VNode;
    }

    export class ParseError implements Error {
        constructor(message: string, lexer: any, position: number);

        name: string;
        message: string;
        position: number;
    }

    /**
     * Renders a TeX expression into the specified DOM element
     * @param tex A TeX expression
     * @param element The DOM element to render into
     * @param options KaTeX options
     */
    export function render(tex: string, element: HTMLElement, options?: SettingsOptions): void;

    /**
     * Renders a TeX expression into an HTML string
     * @param tex A TeX expression
     * @param options KaTeX options
     */
    export function renderToString(tex: string, options?: SettingsOptions): string;


    export function __parse(tex: string): any;

    export function __renderToDomTree(expression: string, options: SettingsOptions, tree?: any): VirtualDomNode;

    export function __renderToHTMLTree(expression: string, options: SettingsOptions, tree?: any): VirtualDomNode;

    export function __symbols(): { [mode: string]: { [symbol: string]: { font: string, group: string, replace?: string } } }
}