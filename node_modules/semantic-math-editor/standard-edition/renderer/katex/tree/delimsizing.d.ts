/**
 * @hidden
 * @packageDocumentation
 */
import { AbstractNode, ParseValue } from "./AST";
import { AbstractSymbol } from "./symbols";
import { KatexNodeVisitor } from "./visitors";
/**
 * Does not create Katex node -> no attributes on left and right in DOM -> unusable.
 * Create Open-Close pairs of symbols instead
 * @deprecated
 */
export declare class Delimsizing extends AbstractNode {
    command: string;
    delimiter: AbstractSymbol;
    static commands: {
        bigl: string;
        Bigl: string;
        biggl: string;
        Biggl: string;
        bigr: string;
        Bigr: string;
        biggr: string;
        Biggr: string;
        bigm: string;
        Bigm: string;
        biggm: string;
        Biggm: string;
        big: string;
        Big: string;
        bigg: string;
        Bigg: string;
    };
    constructor(command: string, delimiter: AbstractSymbol);
    toParseValue(): ParseValue;
    accept<T>(visitor: KatexNodeVisitor<T>): T;
}
/**
 * WARNING! This node loses attributes of left/right/middle symbols. Do not assign katex-id to this children.
 * Create Open-Close pairs of symbols instead
 */
export declare class LeftRight extends AbstractNode {
    left: AbstractSymbol;
    right: AbstractSymbol;
    body: AbstractNode[];
    constructor(left: AbstractSymbol, right: AbstractSymbol, body?: AbstractNode[]);
    toParseValue(): ParseValue;
    accept<T>(visitor: KatexNodeVisitor<T>): T;
}
/**
 * WARNING! This node loses attributes. Do not assign katex-id to it.
 * Unusable without Leftright.
 */
export declare class Middle extends AbstractNode {
    symbol: AbstractSymbol;
    constructor(symbol: AbstractSymbol);
    toParseValue(): ParseValue;
    accept<T>(visitor: KatexNodeVisitor<T>): T;
}
export declare const delimiters: string[];
