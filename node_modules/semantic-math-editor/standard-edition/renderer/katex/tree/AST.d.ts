/**
 * @hidden
 * @packageDocumentation
 */
import { KatexNodeVisitor } from "./visitors";
export declare class KatexTree {
    nodes: AbstractNode[];
    constructor(nodes: AbstractNode[] | AbstractNode);
    accept<T>(visitor: KatexNodeVisitor<T>): T;
}
export declare class ParseNode {
    type: string;
    mode: Mode;
    attributes: {};
    [valueFields: string]: any;
    constructor(type: string, value: ParseValue, mode: Mode);
}
export declare type Mode = "math" | "text";
export declare class Size {
    number: number;
    unit: string;
    constructor(number: number, unit: string);
}
/**
 * @description Implements fields common for all Katex tree nodes and conversion to Katex tree format.
 * For example, "type" and "mode" must present on every node and this class adds them uniformly.
 */
export declare abstract class AbstractNode {
    type: string;
    mode: Mode;
    attributes: {
        [key: string]: string;
    };
    constructor(type: string);
    static katexIdAttr: string;
    static cursorAttr: string;
    static transparentAttr: string;
    static visiblePlaceholderAttr: string;
    static parentKatexIdAttr: string;
    static katexSpecialNodeAttr: string;
    static phantomKatexSpecialNode: string;
    abstract toParseValue(): ParseValue;
    toParseNode(): ParseNode;
    abstract accept<T>(visitor: KatexNodeVisitor<T>): T;
    get katexId(): string | null;
    set katexId(id: string | null);
    withKatexId(id: string | number): AbstractNode;
    setAttribute(name: string, value: string): void;
    removeAttribute(name: string): void;
    get cursor(): boolean;
    set cursor(cursor: boolean);
    withCursor(cursor: boolean): AbstractNode;
    get transparent(): boolean;
    set transparent(transparent: boolean);
    withTransparent(transparent: boolean): AbstractNode;
}
export interface ParseValue {
    body?: ParseNode | ParseNode[] | ParseNode[][];
    [field: string]: any;
}
