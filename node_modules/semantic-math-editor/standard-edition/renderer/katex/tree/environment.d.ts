/**
 * @hidden
 * @packageDocumentation
 */
import { AbstractNode, ParseNode, ParseValue, Mode } from "./AST";
import { KatexNodeVisitor } from "./visitors";
export declare abstract class AbstractEnvironment extends AbstractNode {
    command: string;
    body: AbstractNode[][];
    rowGaps?: number[];
    constructor(command: string, body: AbstractNode[][], rowGaps?: number[]);
    protected toColsParseValue(cols?: EnvironmentColumns): (ColumnAlign | ColumnSeparator)[];
    protected wrapBodyNodes(stylingCommand: string): ParseNode[][];
}
declare type ColumnAlign = {
    type: "align";
    align: "r" | "l" | "c";
    pregap: number;
    postgap: number;
};
declare type ColumnSeparator = {
    type: "separator";
    separator: "|" | ":";
};
export declare class ArrayEnvironment extends AbstractEnvironment {
    cols?: EnvironmentColumns;
    static commands: {
        array: string;
        darray: string;
    };
    constructor(name: string, body: AbstractNode[][], cols: EnvironmentColumns, rowGaps?: number[]);
    toParseValue(): ParseValue;
    accept<T>(visitor: KatexNodeVisitor<T>): T;
}
export declare class MatrixEnvironment extends AbstractEnvironment {
    static commands: {
        matrix: string;
        pmatrix: string;
        bmatrix: string;
        Bmatrix: string;
        vmatrix: string;
        Vmatrix: string;
    };
    constructor(command: string, body: AbstractNode[][]);
    toParseValue(): ParseNode | {
        type: string;
        mode: Mode;
        body: ParseNode[];
        left: string;
        right: string;
    };
    accept<T>(visitor: KatexNodeVisitor<T>): T;
}
export declare class CasesEnvironment extends AbstractEnvironment {
    static commands: {
        cases: string;
        dcases: string;
    };
    constructor(name: string, body: AbstractNode[][]);
    toParseValue(): ParseValue;
    accept<T>(visitor: KatexNodeVisitor<T>): T;
}
export declare type EnvironmentColumns = ("r" | "l" | "c" | "|" | ":")[];
export {};
