/**
 * @hidden
 * @packageDocumentation
 */
import { AbstractNode, ParseValue } from "./AST";
import { KatexNodeVisitor } from "./visitors";
export declare class Operation extends AbstractNode {
    command: string;
    limits: boolean;
    symbol: boolean;
    body?: AbstractNode[];
    suppressBaseShift: boolean;
    alwaysHandleSupSub: boolean;
    static commands: {
        sin: string;
        arcsin: string;
        arsh: string;
        sinh: string;
        sh: string;
        arcsinh: string;
        arcsh: string;
        cos: string;
        arccos: string;
        arch: string;
        cosh: string;
        ch: string;
        arccosh: string;
        tan: string;
        tg: string;
        tanh: string;
        th: string;
        arctan: string;
        arctg: string;
        arctanh: string;
        arctgh: string;
        cot: string;
        ctg: string;
        cotg: string;
        coth: string;
        cth: string;
        arccot: string;
        arcctg: string;
        arccoth: string;
        arcctgh: string;
        sec: string;
        sech: string;
        arcsec: string;
        arcsech: string;
        csc: string;
        cosec: string;
        csch: string;
        cosech: string;
        arccsc: string;
        arccsch: string;
        arg: string;
        deg: string;
        dim: string;
        exp: string;
        hom: string;
        ker: string;
        lg: string;
        ln: string;
        log: string;
        det: string;
        gcd: string;
        inf: string;
        lim: string;
        max: string;
        min: string;
        Pr: string;
        sup: string;
        int: string;
        iint: string;
        iiint: string;
        oint: string;
        oiint: string;
        oiiint: string;
        coprod: string;
        bigvee: string;
        bigwedge: string;
        biguplus: string;
        bigcap: string;
        bigcup: string;
        intop: string;
        prod: string;
        sum: string;
        bigotimes: string;
        bigoplus: string;
        bigodot: string;
        bigsqcup: string;
        smallint: string;
        mathop: string;
    };
    constructor(command: string, body?: AbstractNode[]);
    /**
     * @description Analogue of latex's '\\limits' in Katex; we want limit to be in display mode in all places including
     * fraction, but in plain latex it is in inline mode in fraction; normal way to achieve that is '\\limits', but it
     * is not presented in Katex tree and parsed explicitly by Katex, so we have to use details of Katex's
     * implementation.
     */
    withLimits(): this;
    toParseValue(): ParseValue;
    accept<T>(visitor: KatexNodeVisitor<T>): T;
}
