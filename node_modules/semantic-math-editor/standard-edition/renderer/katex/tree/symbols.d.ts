/**
 * @hidden
 * @packageDocumentation
 */
import { AbstractNode, Mode, ParseValue } from "./AST";
import { KatexNodeVisitor } from "./visitors";
/**
 * @description Symbols should be built with guessSymbol rather than manually.
 */
export declare abstract class AbstractSymbol extends AbstractNode {
    ligature: string;
    static type: any;
    protected constructor(type: string, ligature: string);
    toParseValue(): ParseValue;
}
export declare abstract class Atom extends AbstractSymbol {
    family: string;
    protected constructor(type: string, ligature: string);
    toParseValue(): ParseValue;
}
export declare class Textord extends AbstractSymbol {
    static type: string;
    constructor(ligature: string, mode?: Mode);
    accept<T>(visitor: KatexNodeVisitor<T>): T;
}
export declare class Mathord extends AbstractSymbol {
    static type: string;
    constructor(ligature: string);
    accept<T>(visitor: KatexNodeVisitor<T>): T;
}
export declare class RelationSymbol extends Atom {
    static type: string;
    constructor(ligature: string);
    accept<T>(visitor: KatexNodeVisitor<T>): T;
}
export declare class BinSymbol extends Atom {
    static type: string;
    constructor(ligature: string);
    accept<T>(visitor: KatexNodeVisitor<T>): T;
}
export declare class CloseSymbol extends Atom {
    static type: string;
    constructor(ligature: string);
    accept<T>(visitor: KatexNodeVisitor<T>): T;
}
export declare class InnerSymbol extends Atom {
    static type: string;
    constructor(ligature: string);
    accept<T>(visitor: KatexNodeVisitor<T>): T;
}
export declare class OpenSymbol extends Atom {
    static type: string;
    constructor(ligature: string);
    accept<T>(visitor: KatexNodeVisitor<T>): T;
}
export declare class PunctSymbol extends Atom {
    static type: string;
    constructor(ligature: string);
    accept<T>(visitor: KatexNodeVisitor<T>): T;
}
export declare class Spacing extends AbstractSymbol {
    static type: string;
    constructor(ligature: string);
    accept<T>(visitor: KatexNodeVisitor<T>): T;
}
export declare const symbolTypes: (typeof Textord)[];
