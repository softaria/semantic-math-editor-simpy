/**
 * @hidden
 * @packageDocumentation
 */
import { RootNode, Terminal, TerminalPointer } from "../../model/model-base";
import { AbstractNode, KatexTree } from "./tree/AST";
import { Decoration, DomRenderedTree, DomRenderer } from "../../editor/editor-support";
import { VisualGraph, VisualSymbol } from "../../structure/visual-levels";
import { EditableGroupRoot } from "../../editor/multcell-editor";
import { CursorPosition } from "../../model/cursor-position";
import { SemanticContext } from "../../engine/semantic-context";
export declare class KatexRenderer implements DomRenderer {
    private rootElement;
    private editorElement;
    private editorHyperElement;
    private focused;
    private cleanDecorations;
    private readonly displayMode;
    private readonly revertPosition;
    private existingCursorId;
    private rendered;
    private cleanWidePlaceholders;
    private katexNodeElementCache;
    constructor(domElement: HTMLElement, displayMode: boolean);
    destroy(): void;
    render(semanticTree: RootNode, visualGraph: VisualGraph, editableGroups: EditableGroupRoot[], semanticContext: SemanticContext): KatexRenderedTree;
    renderDecorations(visualGraph: VisualGraph, editableGroups: EditableGroupRoot[], decoration: Decoration, cursor: CursorPosition): void;
    private cleanAllDecorations;
    renderCursor(cursor: TerminalPointer): void;
    private setCursorSymbolVisibility;
    private getCursorSymbol;
    get selectionMetrics(): ClientRect[];
    get selectionElements(): HTMLElement[];
    setFocused(focused: boolean): void;
    private chooseCursor;
    private renderHTML;
}
export declare class KatexRenderedTree implements DomRenderedTree {
    readonly katexTree: KatexTree;
    readonly rootElement: Element;
    readonly katexMap: KatexNodesMap;
    readonly visualGraph: VisualGraph;
    readonly semanticContext: SemanticContext;
    private readonly katexArray;
    private readonly katexNodeElementCache;
    cursorKatexId: string;
    private readonly metricsVisitor;
    constructor(katexTree: KatexTree, rootElement: Element, katexMap: KatexNodesMap, katexArray: AbstractNode[], katexNodeElementCache: Map<string, Element>, visualGraph: VisualGraph, semanticContext: SemanticContext);
    metrics(vs: VisualSymbol): ClientRect[];
    cursorPlaceholderMetrics(vs: VisualSymbol): ClientRect[];
    get cursorMetrics(): ClientRect;
    get cursorElement(): Element;
    element(target: Terminal): Element;
    selectElement(katexId: string): Element;
    private node;
}
declare type KatexNodeId = string;
declare type KatexNodesMap = {
    [uniqueKey: string]: KatexNodeId;
};
export declare function cursorId(katexId: string, left: boolean): string;
export declare function render2string(semanticTree: RootNode, showPlaceholders: boolean): string;
export {};
