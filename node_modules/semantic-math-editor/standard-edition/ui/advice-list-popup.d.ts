/**
 * @hidden
 * @packageDocumentation
 */
import { Point } from "../model/utils";
export interface AdviceHtmlContainer {
    index: number;
    labelText: string;
    ariaLabelText: string;
    description: string;
    htmlText: string;
    htmlObject: HTMLElement;
    apply: () => void;
    select: () => void;
}
export declare class AdviceListPopup {
    static fixedDisplayAmount: number;
    readonly hintListWrapId = "hint-list-wrap";
    readonly hintsContainerId = "hints-container";
    readonly hintFullNameId = "hint-full-name";
    readonly hintListId = "hint-list";
    readonly hintListFilterBoxId = "hint-list-filter";
    private mousetrapFilter;
    private mousetrapList;
    private readonly calculatePosition;
    private readonly onShow;
    private readonly onHide;
    private readonly onFilter;
    private readonly onRequestMore;
    private hintListWrap;
    private hintList;
    private hintListFilterBox;
    private hintFullName;
    private hintsContainer;
    private hints;
    private selectedHint;
    private hintsSelectedIndex;
    private userInputLocked;
    private allowClose;
    private mouseOverLocked;
    disabled: boolean;
    readonly delete: () => void;
    private readonly listeners;
    constructor(calculatePosition: () => Point, onShow: () => void, onHide: () => void, onFilter: (p: string) => void, onRequestMore: (startIndex: number) => void);
    private _visible;
    get visible(): boolean;
    private get firstElement();
    private getElement;
    lockUserInput(locked: boolean): void;
    show(hints: AdviceHtmlContainer[], simpleMode: boolean): void;
    update(hints: AdviceHtmlContainer[], simpleMode: boolean): void;
    add(hints: AdviceHtmlContainer[]): void;
    hide(): void;
    selectCurrent(): void;
    moveUpOrDown(up: boolean): void;
    private static windowResizeOrScroll;
    private setupMousetrapFilter;
    private setupMousetrapList;
    private select;
    private removeSelection;
    private onHover;
    private onKeyboardMove;
    private listenersInitialized;
    private ensurePopupBody;
    private generateNewPopupBody;
    private isPopupBodyDefined;
    private allArgsDefined;
    private ensureListeners;
    private createFilterBox;
    private static checkIfInView;
    private addWrapperMouseListeners;
    private addListMouseListeners;
    private addListContainerListeners;
    private addFilterboxListeners;
    private safeStoreListener;
    private static safeRemoveListener;
    private addLiMouseListeners;
    private createHintsHTMLs;
}
