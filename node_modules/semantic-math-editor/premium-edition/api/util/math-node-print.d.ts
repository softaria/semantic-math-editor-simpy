/**
 * @hidden
 * @packageDocumentation
 */
import { MathAbs, MathAnd, MathAreaIntegral, MathBrackets, MathComma, MathConstant, MathDefiniteIntegral, MathDerivative, MathDeterminant, MathDifferential, MathDivision, MathEmptySet, MathEquality, MathExpressionSet, MathFunction, MathFunctionDifference, MathImplicitMultiply, MathIncludeSet, MathIndefiniteIntegral, MathInfimum, MathIntersection, MathInterval, MathLeibnizDerivative, MathLimit, MathLogarithm, MathMax, MathMin, MathMinus, MathMultiply, MathNaturalLogarithm, MathNodeVisitor, MathNumber, MathNumericSet, MathOr, MathParentheses, MathPiecewiseFunction, MathPlaceholder, MathPlus, MathPoint, MathPower, MathPredicate, MathProduct, MathRawText, MathReversedFunction, MathRoot, MathSet, MathSquareRoot, MathSubIndex, MathSum, MathSupremum, MathSymbol, MathSystemOfEquations, MathTransformation, MathTrigonometricFunction, MathUnaryMinus, MathUndefined, MathUnion, MathVariable, MathVerticalBar } from "../model";
export declare class MathNodePrinter implements MathNodeVisitor<string> {
    static readonly instance: MathNodePrinter;
    private constructor();
    visitAbs(mathNode: MathAbs): string;
    visitAnd(mathNode: MathAnd): string;
    visitAreaIntegral(mathNode: MathAreaIntegral): string;
    visitBrackets(mathNode: MathBrackets): string;
    visitComma(mathNode: MathComma): string;
    visitConstant(mathNode: MathConstant): string;
    visitDefiniteIntegral(mathNode: MathDefiniteIntegral): string;
    visitDerivative(mathNode: MathDerivative): string;
    visitDeterminant(mathNode: MathDeterminant): string;
    visitDifferential(mathNode: MathDifferential): string;
    visitDivision(mathNode: MathDivision): string;
    visitEmptySet(mathNode: MathEmptySet): string;
    visitEquality(mathNode: MathEquality): string;
    visitExpressionSet(mathNode: MathExpressionSet): string;
    visitFunction(mathNode: MathFunction): string;
    visitFunctionDifference(mathNode: MathFunctionDifference): string;
    visitImplicitMultiply(mathNode: MathImplicitMultiply): string;
    visitIncludeSet(mathNode: MathIncludeSet): string;
    visitIndefiniteIntegral(mathNode: MathIndefiniteIntegral): string;
    visitInfimum(mathInfimum: MathInfimum): string;
    visitIntersection(mathNode: MathIntersection): string;
    visitInterval(mathNode: MathInterval): string;
    visitLeibnizDerivative(mathNode: MathLeibnizDerivative): string;
    visitLimit(mathNode: MathLimit): string;
    visitLogarithm(mathNode: MathLogarithm): string;
    visitMax(mathNode: MathMax): string;
    visitMin(mathNode: MathMin): string;
    visitMinus(mathNode: MathMinus): string;
    visitMultiply(mathNode: MathMultiply): string;
    visitNaturalLogarithm(mathNode: MathNaturalLogarithm): string;
    visitNumber(mathNode: MathNumber): string;
    visitNumericSet(mathNode: MathNumericSet): string;
    visitOr(mathNode: MathOr): string;
    visitParentheses(mathNode: MathParentheses): string;
    visitPiecewiseFunction(mathNode: MathPiecewiseFunction): string;
    visitPlaceholder(mathNode: MathPlaceholder): string;
    visitPlus(mathNode: MathPlus): string;
    visitPower(mathNode: MathPower): string;
    visitPredicate(mathNode: MathPredicate): string;
    visitProduct(mathNode: MathProduct): string;
    visitRawText(mathNode: MathRawText): string;
    visitReversedFunction(mathNode: MathReversedFunction): string;
    visitRoot(mathNode: MathRoot): string;
    visitPoint(mathNode: MathPoint): string;
    visitSet(mathNode: MathSet): string;
    visitSquareRoot(mathNode: MathSquareRoot): string;
    visitSubIndex(mathNode: MathSubIndex): string;
    visitSum(mathNode: MathSum): string;
    visitSupremum(mathSupremum: MathSupremum): string;
    visitSymbol(mathNode: MathSymbol): string;
    visitSystemOfEquations(mathNode: MathSystemOfEquations): string;
    visitTransformation(mathNode: MathTransformation): string;
    visitTrigonometricFunction(mathNode: MathTrigonometricFunction): string;
    visitUnaryMinus(mathNode: MathUnaryMinus): string;
    visitUndefined(mathUndef: MathUndefined): string;
    visitUnion(mathNode: MathUnion): string;
    visitVariable(mathNode: MathVariable): string;
    visitVerticalBar(mathNode: MathVerticalBar): string;
}
