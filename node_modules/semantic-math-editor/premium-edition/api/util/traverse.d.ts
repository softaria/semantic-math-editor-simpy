/**
 * @hidden
 * @packageDocumentation
 */
import { MathAbs, MathAnd, MathAreaIntegral, MathBrackets, MathComma, MathConstant, MathDefiniteIntegral, MathDerivative, MathDeterminant, MathDifferential, MathDivision, MathEmptySet, MathEquality, MathExpressionSet, MathFunction, MathFunctionDifference, MathImplicitMultiply, MathIncludeSet, MathIndefiniteIntegral, MathInfimum, MathIntersection, MathInterval, MathLeibnizDerivative, MathLimit, MathLogarithm, MathMax, MathMin, MathMinus, MathMultiply, MathNaturalLogarithm, MathNodeVisitor, MathNumber, MathNumericSet, MathOr, MathParentheses, MathPiecewiseFunction, MathPlaceholder, MathPlus, MathPoint, MathPower, MathPredicate, MathProduct, MathRawText, MathReversedFunction, MathRoot, MathSet, MathSquareRoot, MathStructure, MathSubIndex, MathSum, MathSupremum, MathSymbol, MathSystemOfEquations, MathTransformation, MathTrigonometricFunction, MathUnaryMinus, MathUndefined, MathUnion, MathVariable, MathVerticalBar } from "../model";
export declare function traverseStructures(mathNode: MathStructure, callback: (structure: MathStructure) => void): void;
export declare function traverseSymbols(mathNode: MathStructure, callback: (symbol: MathSymbol) => void): void;
export declare function handleSymbols(mathNode: MathStructure, callback: (symbol: MathSymbol) => void): void;
export declare class MathNodeChildrenVisitor implements MathNodeVisitor<void> {
    callback: (structure: MathStructure) => void;
    constructor(callback: (structure: MathStructure) => void);
    visitAbs(mathNode: MathAbs): void;
    visitAnd(mathNode: MathAnd): void;
    visitAreaIntegral(mathNode: MathAreaIntegral): void;
    visitBrackets(mathNode: MathBrackets): void;
    visitComma(mathNode: MathComma): void;
    visitConstant(mathNode: MathConstant): void;
    visitDefiniteIntegral(mathNode: MathDefiniteIntegral): void;
    visitDerivative(mathNode: MathDerivative): void;
    visitDeterminant(mathNode: MathDeterminant): void;
    visitDifferential(mathNode: MathDifferential): void;
    visitDivision(mathNode: MathDivision): void;
    visitEmptySet(mathNode: MathEmptySet): void;
    visitEquality(mathNode: MathEquality): void;
    visitExpressionSet(mathNode: MathExpressionSet): void;
    visitFunction(mathNode: MathFunction): void;
    visitFunctionDifference(mathNode: MathFunctionDifference): void;
    visitImplicitMultiply(mathNode: MathImplicitMultiply): void;
    visitIncludeSet(mathNode: MathIncludeSet): void;
    visitIndefiniteIntegral(mathNode: MathIndefiniteIntegral): void;
    visitInfimum(mathNode: MathInfimum): void;
    visitIntersection(mathNode: MathIntersection): void;
    visitInterval(mathNode: MathInterval): void;
    visitLeibnizDerivative(mathNode: MathLeibnizDerivative): void;
    visitLimit(mathNode: MathLimit): void;
    visitLogarithm(mathNode: MathLogarithm): void;
    visitMax(mathNode: MathMax): void;
    visitMin(mathNode: MathMin): void;
    visitMinus(mathNode: MathMinus): void;
    visitMultiply(mathNode: MathMultiply): void;
    visitNaturalLogarithm(mathNode: MathNaturalLogarithm): void;
    visitNumber(mathNode: MathNumber): void;
    visitNumericSet(mathNode: MathNumericSet): void;
    visitOr(mathNode: MathOr): void;
    visitParentheses(mathNode: MathParentheses): void;
    visitPiecewiseFunction(mathNode: MathPiecewiseFunction): void;
    visitPlaceholder(mathNode: MathPlaceholder): void;
    visitPlus(mathNode: MathPlus): void;
    visitPoint(mathNode: MathPoint): void;
    visitPower(mathNode: MathPower): void;
    visitPredicate(mathNode: MathPredicate): void;
    visitProduct(mathNode: MathProduct): void;
    visitRawText(mathNode: MathRawText): void;
    visitReversedFunction(mathNode: MathReversedFunction): void;
    visitRoot(mathNode: MathRoot): void;
    visitSet(mathNode: MathSet): void;
    visitSquareRoot(mathNode: MathSquareRoot): void;
    visitSubIndex(mathNode: MathSubIndex): void;
    visitSum(mathNode: MathSum): void;
    visitSupremum(mathNode: MathSupremum): void;
    visitSymbol(mathNode: MathSymbol): void;
    visitSystemOfEquations(mathNode: MathSystemOfEquations): void;
    visitTransformation(mathNode: MathTransformation): void;
    visitTrigonometricFunction(mathNode: MathTrigonometricFunction): void;
    visitUnaryMinus(mathNode: MathUnaryMinus): void;
    visitUndefined(mathNode: MathUndefined): void;
    visitUnion(mathNode: MathUnion): void;
    visitVariable(mathNode: MathVariable): void;
    visitVerticalBar(mathNode: MathVerticalBar): void;
    private handleNode;
    private handleNodes;
    private handleOptionalNode;
}
export declare class MathNodeSymbolsVisitor implements MathNodeVisitor<void> {
    private readonly callback;
    constructor(callback: (symbol: MathSymbol) => void);
    visitAbs(mathNode: MathAbs): void;
    visitAnd(mathNode: MathAnd): void;
    visitAreaIntegral(mathNode: MathAreaIntegral): void;
    visitBrackets(mathNode: MathBrackets): void;
    visitComma(mathNode: MathComma): void;
    visitConstant(mathNode: MathConstant): void;
    visitDefiniteIntegral(mathNode: MathDefiniteIntegral): void;
    visitDerivative(mathNode: MathDerivative): void;
    visitDeterminant(mathNode: MathDeterminant): void;
    visitDifferential(mathNode: MathDifferential): void;
    visitDivision(mathNode: MathDivision): void;
    visitEmptySet(mathNode: MathEmptySet): void;
    visitEquality(mathNode: MathEquality): void;
    visitExpressionSet(mathNode: MathExpressionSet): void;
    visitFunction(mathNode: MathFunction): void;
    visitFunctionDifference(mathNode: MathFunctionDifference): void;
    visitImplicitMultiply(mathNode: MathImplicitMultiply): void;
    visitIncludeSet(mathNode: MathIncludeSet): void;
    visitIndefiniteIntegral(mathNode: MathIndefiniteIntegral): void;
    visitInfimum(mathNode: MathInfimum): void;
    visitIntersection(mathNode: MathIntersection): void;
    visitInterval(mathNode: MathInterval): void;
    visitLeibnizDerivative(mathNode: MathLeibnizDerivative): void;
    visitLimit(mathNode: MathLimit): void;
    visitLogarithm(mathNode: MathLogarithm): void;
    visitMax(mathNode: MathMax): void;
    visitMin(mathNode: MathMin): void;
    visitMinus(mathNode: MathMinus): void;
    visitMultiply(mathNode: MathMultiply): void;
    visitNaturalLogarithm(mathNode: MathNaturalLogarithm): void;
    visitNumber(mathNode: MathNumber): void;
    visitNumericSet(mathNode: MathNumericSet): void;
    visitOr(mathNode: MathOr): void;
    visitParentheses(mathNode: MathParentheses): void;
    visitPiecewiseFunction(mathNode: MathPiecewiseFunction): void;
    visitPlaceholder(mathNode: MathPlaceholder): void;
    visitPlus(mathNode: MathPlus): void;
    visitPoint(mathNode: MathPoint): void;
    visitPower(mathNode: MathPower): void;
    visitPredicate(mathNode: MathPredicate): void;
    visitProduct(mathNode: MathProduct): void;
    visitRawText(mathNode: MathRawText): void;
    visitReversedFunction(mathNode: MathReversedFunction): void;
    visitRoot(mathNode: MathRoot): void;
    visitSet(mathNode: MathSet): void;
    visitSquareRoot(mathNode: MathSquareRoot): void;
    visitSubIndex(mathNode: MathSubIndex): void;
    visitSum(mathNode: MathSum): void;
    visitSupremum(mathNode: MathSupremum): void;
    visitSymbol(mathNode: MathSymbol): void;
    visitSystemOfEquations(mathNode: MathSystemOfEquations): void;
    visitTransformation(mathNode: MathTransformation): void;
    visitTrigonometricFunction(mathNode: MathTrigonometricFunction): void;
    visitUnaryMinus(mathNode: MathUnaryMinus): void;
    visitUndefined(mathNode: MathUndefined): void;
    visitUnion(mathNode: MathUnion): void;
    visitVariable(mathNode: MathVariable): void;
    visitVerticalBar(mathNode: MathVerticalBar): void;
}
