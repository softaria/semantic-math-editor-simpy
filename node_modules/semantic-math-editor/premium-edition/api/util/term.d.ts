/**
 * @hidden
 * @packageDocumentation
 */
import { MathAbs, MathAnd, MathAreaIntegral, MathBrackets, MathComma, MathConstant, MathDefiniteIntegral, MathDerivative, MathDeterminant, MathDifferential, MathDivision, MathEmptySet, MathEquality, MathExpressionSet, MathFunction, MathFunctionDifference, MathImplicitMultiply, MathIncludeSet, MathIndefiniteIntegral, MathInfimum, MathIntersection, MathInterval, MathLeibnizDerivative, MathLimit, MathLogarithm, MathMax, MathMin, MathMinus, MathMultiply, MathNaturalLogarithm, MathNodeVisitor, MathNumber, MathNumericSet, MathOr, MathParentheses, MathPiecewiseFunction, MathPlaceholder, MathPlus, MathPoint, MathPower, MathPredicate, MathProduct, MathRawText, MathReversedFunction, MathRoot, MathSet, MathSquareRoot, MathSubIndex, MathSum, MathSupremum, MathSymbol, MathSystemOfEquations, MathTransformation, MathTrigonometricFunction, MathUnaryMinus, MathUndefined, MathUnion, MathVariable, MathVerticalBar } from "../model";
export declare class Term {
}
export declare class ExpressionTerm extends Term {
}
export declare class PointTerm extends ExpressionTerm {
}
export declare class PredicateTerm extends ExpressionTerm {
}
export declare class FunctionalExpressionTerm extends ExpressionTerm {
}
export declare class PowerTerm extends FunctionalExpressionTerm {
}
export declare class UndefinedTerm extends ExpressionTerm {
}
export declare class SymbolTerm extends FunctionalExpressionTerm {
}
export declare class VariableTerm extends SymbolTerm {
}
export declare class IndexVariableTerm extends VariableTerm {
}
export declare class ConstTerm extends SymbolTerm {
}
export declare class NumberTerm extends FunctionalExpressionTerm {
}
export declare class IntegerTerm extends NumberTerm {
}
export declare class SystemOfEquationsTerm extends ExpressionTerm {
}
export declare class SetTerm extends ExpressionTerm {
}
export declare class PredicateSetTerm extends ExpressionTerm {
}
export declare class PredicateSetOperationTerm extends PredicateSetTerm {
}
export declare class IntervalTerm extends SetTerm {
}
export declare class NumericSetTerm extends SetTerm {
}
export declare class EqualityInequalityTerm extends PredicateSetTerm {
}
export declare class TransformationTerm extends Term {
}
export declare class ErrorTerm extends Term {
}
export declare class PlaceholderTerm extends ErrorTerm {
}
export declare class CommaTerm extends ErrorTerm {
}
export declare class VerticalBarTerm extends ErrorTerm {
}
export declare class RawTextTerm extends Term {
}
export declare class TermMathStructureVisitor implements MathNodeVisitor<Term[]> {
    static readonly instance: TermMathStructureVisitor;
    visitAbs(mathNode: MathAbs): Term[];
    visitAnd(mathNode: MathAnd): Term[];
    visitAreaIntegral(mathNode: MathAreaIntegral): Term[];
    visitBrackets(mathNode: MathBrackets): Term[];
    visitComma(mathNode: MathComma): Term[];
    visitConstant(mathNode: MathConstant): Term[];
    visitDefiniteIntegral(mathNode: MathDefiniteIntegral): Term[];
    visitDerivative(mathNode: MathDerivative): Term[];
    visitDeterminant(mathNode: MathDeterminant): Term[];
    visitDifferential(mathNode: MathDifferential): Term[];
    visitDivision(mathNode: MathDivision): Term[];
    visitEmptySet(mathNode: MathEmptySet): Term[];
    visitEquality(mathNode: MathEquality): Term[];
    visitExpressionSet(mathNode: MathExpressionSet): Term[];
    visitFunction(mathNode: MathFunction): Term[];
    visitFunctionDifference(mathNode: MathFunctionDifference): Term[];
    visitImplicitMultiply(mathNode: MathImplicitMultiply): Term[];
    visitIncludeSet(mathNode: MathIncludeSet): Term[];
    visitIndefiniteIntegral(mathNode: MathIndefiniteIntegral): Term[];
    visitInfimum(mathNode: MathInfimum): Term[];
    visitIntersection(mathNode: MathIntersection): Term[];
    visitInterval(mathNode: MathInterval): Term[];
    visitLeibnizDerivative(mathNode: MathLeibnizDerivative): Term[];
    visitLimit(mathNode: MathLimit): Term[];
    visitLogarithm(mathNode: MathLogarithm): Term[];
    visitMax(mathNode: MathMax): Term[];
    visitMin(mathNode: MathMin): Term[];
    visitMinus(mathNode: MathMinus): Term[];
    visitMultiply(mathNode: MathMultiply): Term[];
    visitNaturalLogarithm(mathNode: MathNaturalLogarithm): Term[];
    visitNumber(mathNode: MathNumber): Term[];
    visitNumericSet(mathNode: MathNumericSet): Term[];
    visitOr(mathNode: MathOr): Term[];
    visitParentheses(mathNode: MathParentheses): Term[];
    visitPiecewiseFunction(mathNode: MathPiecewiseFunction): Term[];
    visitPlaceholder(mathNode: MathPlaceholder): Term[];
    visitPlus(mathNode: MathPlus): Term[];
    visitPoint(mathNode: MathPoint): Term[];
    visitPower(mathNode: MathPower): Term[];
    visitPredicate(mathNode: MathPredicate): Term[];
    visitProduct(mathNode: MathProduct): Term[];
    visitRawText(mathNode: MathRawText): Term[];
    visitReversedFunction(mathNode: MathReversedFunction): Term[];
    visitRoot(mathNode: MathRoot): Term[];
    visitSet(mathNode: MathSet): Term[];
    visitSquareRoot(mathNode: MathSquareRoot): Term[];
    visitSubIndex(mathNode: MathSubIndex): Term[];
    visitSum(mathNode: MathSum): Term[];
    visitSupremum(mathNode: MathSupremum): Term[];
    visitSymbol(mathNode: MathSymbol): Term[];
    visitSystemOfEquations(mathNode: MathSystemOfEquations): Term[];
    visitTransformation(mathNode: MathTransformation): Term[];
    visitTrigonometricFunction(mathNode: MathTrigonometricFunction): Term[];
    visitUnaryMinus(mathNode: MathUnaryMinus): Term[];
    visitUndefined(mathNode: MathUndefined): Term[];
    visitUnion(mathNode: MathUnion): Term[];
    visitVariable(mathNode: MathVariable): Term[];
    visitVerticalBar(mathNode: MathVerticalBar): Term[];
}
