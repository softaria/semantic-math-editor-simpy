/**
 * @hidden
 * @packageDocumentation
 */
import { MathAbs, MathAnd, MathAreaIntegral, MathBrackets, MathComma, MathConstant, MathDefiniteIntegral, MathDerivative, MathDeterminant, MathDifferential, MathDivision, MathEmptySet, MathEquality, MathExpressionSet, MathFunction, MathFunctionDifference, MathImplicitMultiply, MathIncludeSet, MathIndefiniteIntegral, MathInfimum, MathIntersection, MathInterval, MathLeibnizDerivative, MathLimit, MathLogarithm, MathMax, MathMin, MathMinus, MathMultiply, MathNaturalLogarithm, MathNodeVisitor, MathNumber, MathNumericSet, MathOr, MathParentheses, MathPiecewiseFunction, MathPlaceholder, MathPlus, MathPoint, MathPower, MathPredicate, MathProduct, MathRawText, MathReversedFunction, MathRoot, MathSet, MathSquareRoot, MathStructure, MathSubIndex, MathSum, MathSupremum, MathSymbol, MathSystemOfEquations, MathTransformation, MathTrigonometricFunction, MathUnaryMinus, MathUndefined, MathUnion, MathVariable, MathVerticalBar } from "../model";
export declare class Calculator implements MathNodeVisitor<MathStructure> {
    private readonly variableValues;
    constructor(variableValues: {
        [p: string]: number;
    });
    visitAbs(mathNode: MathAbs): MathStructure;
    visitAnd(mathNode: MathAnd): MathStructure;
    visitAreaIntegral(mathNode: MathAreaIntegral): MathStructure;
    visitBrackets(mathNode: MathBrackets): MathStructure;
    visitComma(mathNode: MathComma): MathStructure;
    visitConstant(mathNode: MathConstant): MathStructure;
    visitDefiniteIntegral(mathNode: MathDefiniteIntegral): MathStructure;
    visitDerivative(mathNode: MathDerivative): MathStructure;
    visitDeterminant(mathNode: MathDeterminant): MathStructure;
    visitDifferential(mathNode: MathDifferential): MathStructure;
    visitDivision(mathNode: MathDivision): MathStructure;
    visitEmptySet(mathNode: MathEmptySet): MathStructure;
    visitEquality(mathNode: MathEquality): MathStructure;
    visitExpressionSet(mathNode: MathExpressionSet): MathStructure;
    visitFunction(mathNode: MathFunction): MathStructure;
    visitFunctionDifference(mathNode: MathFunctionDifference): MathStructure;
    visitImplicitMultiply(mathNode: MathImplicitMultiply): MathStructure;
    visitIncludeSet(mathNode: MathIncludeSet): MathStructure;
    visitIndefiniteIntegral(mathNode: MathIndefiniteIntegral): MathStructure;
    visitInfimum(mathNode: MathInfimum): MathStructure;
    visitIntersection(mathNode: MathIntersection): MathStructure;
    visitInterval(mathNode: MathInterval): MathStructure;
    visitPoint(mathNode: MathPoint): MathStructure;
    visitLeibnizDerivative(mathNode: MathLeibnizDerivative): MathStructure;
    visitLimit(mathNode: MathLimit): MathStructure;
    visitLogarithm(mathNode: MathLogarithm): MathStructure;
    visitMax(mathNode: MathMax): MathStructure;
    visitMin(mathNode: MathMin): MathStructure;
    visitMinus(mathNode: MathMinus): MathStructure;
    visitMultiply(mathNode: MathMultiply): MathStructure;
    visitNaturalLogarithm(mathNode: MathNaturalLogarithm): MathStructure;
    visitNumber(mathNode: MathNumber): MathStructure;
    visitNumericSet(mathNode: MathNumericSet): MathStructure;
    visitOr(mathNode: MathOr): MathStructure;
    visitParentheses(mathNode: MathParentheses): MathStructure;
    visitPiecewiseFunction(mathNode: MathPiecewiseFunction): MathStructure;
    visitPlaceholder(mathNode: MathPlaceholder): MathStructure;
    visitPlus(mathNode: MathPlus): MathStructure;
    visitPower(mathNode: MathPower): MathStructure;
    visitPredicate(mathNode: MathPredicate): MathStructure;
    visitProduct(mathNode: MathProduct): MathStructure;
    visitRawText(mathNode: MathRawText): MathStructure;
    visitReversedFunction(mathNode: MathReversedFunction): MathStructure;
    visitRoot(mathNode: MathRoot): MathStructure;
    visitSet(mathNode: MathSet): MathStructure;
    visitSquareRoot(mathNode: MathSquareRoot): MathStructure;
    visitSubIndex(mathNode: MathSubIndex): MathStructure;
    visitSum(mathNode: MathSum): MathStructure;
    visitSupremum(mathNode: MathSupremum): MathStructure;
    visitSymbol(mathNode: MathSymbol): MathStructure;
    visitSystemOfEquations(mathNode: MathSystemOfEquations): MathStructure;
    visitTransformation(mathNode: MathTransformation): MathStructure;
    visitTrigonometricFunction(mathNode: MathTrigonometricFunction): MathStructure;
    visitUnaryMinus(mathNode: MathUnaryMinus): MathStructure;
    visitUndefined(mathNode: MathUndefined): MathStructure;
    visitUnion(mathNode: MathUnion): MathStructure;
    visitVariable(mathNode: MathVariable): MathStructure;
    visitVerticalBar(mathNode: MathVerticalBar): MathStructure;
    private calculateDeterminant;
    private toMathValue;
}
