/**
 * @hidden
 * @packageDocumentation
 */
import { MathAbs, MathAnd, MathAreaIntegral, MathBrackets, MathComma, MathConstant, MathDefiniteIntegral, MathDerivative, MathDeterminant, MathDifferential, MathDivision, MathEmptySet, MathEquality, MathExpressionSet, MathFunction, MathFunctionDifference, MathImplicitMultiply, MathIncludeSet, MathIndefiniteIntegral, MathInfimum, MathIntersection, MathInterval, MathLeibnizDerivative, MathLimit, MathLogarithm, MathMax, MathMin, MathMinus, MathMultiply, MathNaturalLogarithm, MathNodeVisitor, MathNumber, MathNumericSet, MathOr, MathParentheses, MathPiecewiseFunction, MathPlaceholder, MathPlus, MathPoint, MathPower, MathPredicate, MathProduct, MathRawText, MathReversedFunction, MathRoot, MathSet, MathSquareRoot, MathStructure, MathSubIndex, MathSum, MathSupremum, MathSymbol, MathSystemOfEquations, MathTransformation, MathTrigonometricFunction, MathUnaryMinus, MathUndefined, MathUnion, MathVariable, MathVerticalBar } from "../model";
export declare class MathNodeReplaceChildVisitor implements MathNodeVisitor<boolean> {
    readonly existingChild: MathStructure;
    readonly newChild: MathStructure;
    constructor(existingChild: MathStructure, newChild: MathStructure);
    visitAbs(mathNode: MathAbs): boolean;
    visitAnd(mathNode: MathAnd): boolean;
    visitAreaIntegral(mathNode: MathAreaIntegral): boolean;
    visitBrackets(mathNode: MathBrackets): boolean;
    visitComma(mathNode: MathComma): boolean;
    visitConstant(mathNode: MathConstant): boolean;
    visitDefiniteIntegral(mathNode: MathDefiniteIntegral): boolean;
    visitDerivative(mathNode: MathDerivative): boolean;
    visitDeterminant(mathNode: MathDeterminant): boolean;
    visitDifferential(mathNode: MathDifferential): boolean;
    visitDivision(mathNode: MathDivision): boolean;
    visitEmptySet(mathNode: MathEmptySet): boolean;
    visitEquality(mathNode: MathEquality): boolean;
    visitExpressionSet(mathNode: MathExpressionSet): boolean;
    visitFunction(mathNode: MathFunction): boolean;
    visitFunctionDifference(mathNode: MathFunctionDifference): boolean;
    visitImplicitMultiply(mathNode: MathImplicitMultiply): boolean;
    visitIncludeSet(mathNode: MathIncludeSet): boolean;
    visitIndefiniteIntegral(mathNode: MathIndefiniteIntegral): boolean;
    visitInfimum(mathNode: MathInfimum): boolean;
    visitIntersection(mathNode: MathIntersection): boolean;
    visitInterval(mathNode: MathInterval): boolean;
    visitLeibnizDerivative(mathNode: MathLeibnizDerivative): boolean;
    visitLimit(mathNode: MathLimit): boolean;
    visitLogarithm(mathNode: MathLogarithm): boolean;
    visitMax(mathNode: MathMax): boolean;
    visitMin(mathNode: MathMin): boolean;
    visitMinus(mathNode: MathMinus): boolean;
    visitMultiply(mathNode: MathMultiply): boolean;
    visitNaturalLogarithm(mathNode: MathNaturalLogarithm): boolean;
    visitNumber(mathNode: MathNumber): boolean;
    visitNumericSet(mathNode: MathNumericSet): boolean;
    visitOr(mathNode: MathOr): boolean;
    visitParentheses(mathNode: MathParentheses): boolean;
    visitPiecewiseFunction(mathNode: MathPiecewiseFunction): boolean;
    visitPlaceholder(mathNode: MathPlaceholder): boolean;
    visitPlus(mathNode: MathPlus): boolean;
    visitPoint(mathNode: MathPoint): boolean;
    visitPower(mathNode: MathPower): boolean;
    visitPredicate(mathNode: MathPredicate): boolean;
    visitProduct(mathNode: MathProduct): boolean;
    visitRawText(mathNode: MathRawText): boolean;
    visitReversedFunction(mathNode: MathReversedFunction): boolean;
    visitRoot(mathNode: MathRoot): boolean;
    visitSet(mathNode: MathSet): boolean;
    visitSquareRoot(mathNode: MathSquareRoot): boolean;
    visitSubIndex(mathNode: MathSubIndex): boolean;
    visitSum(mathNode: MathSum): boolean;
    visitSupremum(mathNode: MathSupremum): boolean;
    visitSymbol(mathNode: MathSymbol): boolean;
    visitSystemOfEquations(mathNode: MathSystemOfEquations): boolean;
    visitTransformation(mathNode: MathTransformation): boolean;
    visitTrigonometricFunction(mathNode: MathTrigonometricFunction): boolean;
    visitUnaryMinus(mathNode: MathUnaryMinus): boolean;
    visitUndefined(mathNode: MathUndefined): boolean;
    visitUnion(mathNode: MathUnion): boolean;
    visitVariable(mathNode: MathVariable): boolean;
    visitVerticalBar(mathNode: MathVerticalBar): boolean;
    private replaceBasicChild;
    private replaceChildInArray;
}
