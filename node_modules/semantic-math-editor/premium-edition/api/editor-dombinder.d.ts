/**
 * @hidden
 * @packageDocumentation
 */
import { DomRenderer } from "../../standard-edition/editor/editor-support";
import { UndoRedoEditor, UndoRedoEditorState } from "../../standard-edition/editor/undo-redo-editor";
import { MathEditorAPI } from "./editor-api";
import { ExtendedKeyboardShortcuts } from "./extended-keyboard-shortcuts";
import { FocusHandler } from "../../standard-edition/dom/focus-handler";
import { CursorSide } from "../../standard-edition/dom/mouse-selection";
import { SemanticAdviceManager } from "./advice/semantic-advice-manager";
import { IAdvice } from "../../standard-edition/accessibility/advices";
import { Point } from "../../standard-edition/model/utils";
import { AdviceListPopup } from "../../standard-edition/ui/advice-list-popup";
import { Stateful } from "../../standard-edition/editor/editor";
/**
 * @category API
 */
export declare class MathEditor extends MathEditorAPI {
    readonly keyboardShortcuts: ExtendedKeyboardShortcuts;
    readonly focusHandler: FocusHandler;
    readonly element: HTMLElement;
    private locked;
    private readonly;
    private readonly mouseSelection;
    private readonly copyPasteHandler;
    readonly config: {
        selections: {
            frame: number;
            minDistance: number;
        };
        keyBindings: {
            navigation: boolean;
        };
    };
    constructor(editor: UndoRedoEditor & Stateful<UndoRedoEditorState>, element: HTMLElement, renderer: DomRenderer, adviceManager: SemanticAdviceManager);
    get userInputLocked(): boolean;
    get hintListPopup(): AdviceListPopup;
    lockUserInput(): void;
    unlockUserInput(): void;
    setReadOnly(): void;
    setReadWrite(): void;
    disableMouseInteraction(): void;
    enableMouseInteraction(): void;
    selectInRectangle(startPoint: Point, endPoint: Point): boolean;
    enableUndoRedo(): void;
    disableUndoRedo(): void;
    focus(): void;
    blur(): void;
    getNearestNode(point: Point): {
        nodeId: number;
        side: CursorSide;
    };
    showAdviceBox(advice: IAdvice[], showInLocked?: boolean): void;
    delete(): void;
}
