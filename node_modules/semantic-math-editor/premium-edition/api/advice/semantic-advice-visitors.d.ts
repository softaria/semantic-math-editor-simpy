/**
 * @hidden
 * @packageDocumentation
 */
import { AbstractContextAdvice, AbstractReplacementAdvice, BracketConvertationAdvice, FunctionVariableContextAdvice, IContextAdviceVisitor, ImathConvertationAdvice, InsertionAdvice, InsertVariableAdvice, IReplacementAdviceVisitor, PointContextAdvice, SelectionReplacementAdvice, SequenceReplacementAdvice, SpaceContainerModifierAdvice } from "../../../standard-edition/accessibility/advices";
import { Term } from "../../semantic/semantic-view";
import { UndoRedoEditor } from "../../../standard-edition/editor/undo-redo-editor";
import { MathNodeValidationVisitor } from "../util/validation";
export declare class AdviceSemanticDecisionMaker implements IReplacementAdviceVisitor<boolean>, IContextAdviceVisitor<boolean> {
    private readonly generalTerms;
    private readonly editor;
    private readonly semanticValidationVisitor;
    private readonly termCache;
    constructor(editor: UndoRedoEditor, semanticValidationVisitor: MathNodeValidationVisitor, termCache: {
        [uid: string]: Term[];
    });
    visitBracketConvertation(adv: BracketConvertationAdvice): boolean;
    visitContext(adv: AbstractContextAdvice): boolean;
    visitFunctionVariable(adv: FunctionVariableContextAdvice): boolean;
    visitInsertVariable(adv: InsertVariableAdvice): boolean;
    visitInsertion(adv: InsertionAdvice): boolean;
    visitPoint(adv: PointContextAdvice): boolean;
    visitReplacement(adv: AbstractReplacementAdvice): boolean;
    visitSelection(adv: SelectionReplacementAdvice): boolean;
    visitSequenceReplacement(adv: SequenceReplacementAdvice): boolean;
    visitSpaceContainerModify(adv: SpaceContainerModifierAdvice): boolean;
    visitImathConvertation(adv: ImathConvertationAdvice): boolean;
}
