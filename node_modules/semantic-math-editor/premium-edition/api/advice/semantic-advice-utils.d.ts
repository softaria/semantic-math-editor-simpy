/**
 * @hidden
 * @packageDocumentation
 */
import { UndoRedoEditor } from "../../../standard-edition/editor/undo-redo-editor";
import { ErrorSeverity, SemanticError } from "../../../standard-edition/model/errors";
import { IAdvice } from "../../../standard-edition/accessibility/advices";
import { AnyNode } from "../../../standard-edition/model/model-base";
import { MathNodeValidationVisitor } from "../util/validation";
import { Term } from "../util/term";
import { SemanticContext } from "../../../standard-edition/engine/semantic-context";
export declare class SemanticAdviceUtils {
    private static addTerm;
    static generateGeneralRestrictionTerms(editor: UndoRedoEditor, semanticValidationVisitor: MathNodeValidationVisitor, termCache: {
        [uid: string]: Term[];
    }): Term[];
    static getTerms(node: AnyNode, termCache: {
        [uid: string]: Term[];
    }, semanticContext?: SemanticContext): Term[];
    private static getErrorDifferenceDecision;
    static errorsCheck(errors: {
        old: SemanticError[];
        new: SemanticError[];
    }, strictModeCheck: boolean, emptyPlaceholdersRestriction: boolean): boolean;
    static filterBySeverity(errors: SemanticError[], severity: ErrorSeverity): SemanticError[];
    static errorsCountDifference(errors: {
        old: SemanticError[];
        new: SemanticError[];
    }, severity: ErrorSeverity): {
        created: SemanticError[];
        eliminated: SemanticError[];
    };
    static getAdviceErrors(editor: UndoRedoEditor, adviceFactory: (editor: UndoRedoEditor) => IAdvice, severity: ErrorSeverity, semanticValidationVisitor: MathNodeValidationVisitor): {
        old: SemanticError[];
        new: SemanticError[];
    };
}
