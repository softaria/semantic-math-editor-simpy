/**
 * @hidden
 * @packageDocumentation
 */
import { JsonRpcClient } from "./json-rpc";
import { HttpClient } from "./http/http-client";
export declare enum EquivalencyType {
    calculus = "calculus",
    algebra = "algebra"
}
export declare class Topic {
    description: string;
    id: string;
    title: string;
}
export declare class SolutionStep {
    expr: string;
    is_essential: boolean;
}
export declare class RandomProblemParam {
    key: string;
    type: string;
    value: string;
}
export declare class RandomProblem {
    answer: string[];
    solutions: SolutionStep[][][];
    statement: {
        parameters: RandomProblemParam[];
        template: string;
    };
}
export declare class MathServerClient extends JsonRpcClient {
    constructor(url: string, client?: HttpClient);
    checkEquivalency(grl1: string, grl2: string, type: EquivalencyType): Promise<boolean>;
    evaluateExpressions(expressions: string[]): Promise<string[]>;
    computeDerivative(expression: string, var_name?: string): Promise<string>;
    computeIntegral(expression: string): Promise<string>;
    computeLimit(expression: string): Promise<string>;
    simplify(expression: string): Promise<string>;
    getExpressionsType(expressions: string[]): Promise<string[]>;
    getRandomizationTopics(): Promise<Topic[]>;
    generateRandomizedProblem(seed: number, topicId: string): Promise<RandomProblem>;
    run(method: string, param: any): Promise<any>;
    private computeOne;
    private checkForConstantUnderDer;
    compute(grl: string): Promise<{
        result: string;
        changesCount: number;
    }>;
}
